<?php


function displayTable (
$tableOrId/*1*/,
$columnNameOfId/*2*/,
$condition = ""/*3*/,
$queryOver = ""/*4*/,
$queryOver2 = ""/*5*/,
$editable = ""/*6*/,
$sComingFrom = ""/*7*/,
$isNToMDisplayEditEntry = "no"/*8*/,
$paging = "yes"/*9*/,
$sTableType = "normal"/*10*/,
$limit=10/*11*/,
$ajaxExec=0/*12*/,
$searchParams=0/*13*/,
$aGlobal=0/*14*/,
$checkable=0/*15*/,
$searchable="yes"/*16*/,
$showRelations="yes"/*17*/,
$checkableFunction=""/*18*/,
$additionalColumn=""/*19*/,
$columnsToDisplay=""/*20*/,
$aManualFieldProperties=""/*21*/,
$sUserFunction=""/*22*/,
$deletable=""/*23*/,
$addable=""/*24*/,
$sBeforeAjaxQueryString=""/*25*/,
$sComingFromRelations = ""/*26*/
) {
	if ($condition == "null"/*3*/)
		$condition = "";
	if ($queryOver == "null"/*4*/)
		$queryOver = "";
	if ($queryOver2 == "null"/*5*/)
		$queryOver2 = "";
	if ($editable == "null"/*6*/)
		$editable = "";
	if ($sComingFrom == "null"/*7*/)
		$sComingFrom = "";
	if ($isNToMDisplayEditEntry == "null"/*8*/)
		$isNToMDisplayEditEntry = "no";
	if ($paging == "null"/*9*/)
		$paging = "yes";
	if ($sTableType == "null"/*10*/)
		$sTableType = "normal";
	if ($limit == "null"/*11*/)
		$limit = "10";
	if ($ajaxExec == "null"/*12*/)
		$ajaxExec = "0";
	if ($searchParams == "null"/*13*/)
		$searchParams = "0";
	if ($aGlobal == "null"/*14*/)
		$aGlobal = "0";
	if ($checkable == "null"/*15*/)
		$checkable = "0";
	if ($searchable == "null"/*16*/)
		$searchable = "yes";
	if ($showRelations == "null"/*17*/)
		$showRelations = "yes";
	if ($checkableFunction == "null"/*18*/)
		$checkableFunction = "";
	if ($additionalColumn == "null"/*19*/)
		$additionalColumn = "";
	if ($columnsToDisplay == "null"/*20*/)
		$columnsToDisplay = "";
	if ($aManualFieldProperties == "null"/*21*/)
		$aManualFieldProperties = "";
	if ($sUserFunction == "null"/*22*/)
		$sUserFunction = "";
	if ($deletable == "null"/*23*/)
		$deletable = "";
	if ($addable == "null"/*24*/)
		$addable = "";
	if ($sBeforeAjaxQueryString == "null"/*25*/)
		$sBeforeAjaxQueryString = "";
	if ($sComingFromRelations == "null"/*26*/)
		$sComingFromRelations = "";

	global $DB, $aRel, $aProp, $iInstaceId, $aTable, $aRightsHidden, $aRightsUnchangeable, $lastRowIdNToM, $lastTableNameNToM;
	global $sDisplayTableRecursivePath;  
	global $aNTo1TablePath;
	global $aPagingRecursivePath;
	global $webuser;

	/*$aTableProperties = getTableProperties($tableOrId);
	if (is_numeric($tableOrId)) {
		$table = $aTableProperties[name];
		$tableId = $aTableProperties[id];
	} else {
		$table = $tableOrId;
		$tableId = "";
	}*/
	//if ($webuser) {
		//echo $table,$condition;
	//	$a = selectRec($table,$condition);
	//	if (count($a) == 0) {
			//echo "Kein Eintrag.";
			//return;
		//}
	//}
	
	if ($aManualFieldProperties) 
		$aManualFieldProperties = unserialize($aManualFieldProperties);
	
	//Suchparameter durch ajax
	if ($searchParams and $searchParams != 's:1:"0";' and $searchParams != 's:0:"";') {
		$searchParams = unserialize($searchParams);
		foreach ($searchParams as $k => $v) 
			if ($k != "page" and $k != "" and $k != "page_table" and $k != "place") 
				$comparationSP[$k] = $v; 
		if (!is_array($_SESSION[lastSP][$searchParams[page_table]."-".$searchParams[place]]))
			$_SESSION[lastSP][$searchParams[page_table]."-".$searchParams[place]] = array();
		$a = @array_diff($comparationSP, $_SESSION[lastSP][$searchParams[page_table]."-".$searchParams[place]]);
		$_GET[page] = $searchParams[page];
		if (count($a)) {
			$_GET[page] = 1; 
		}
		$_SESSION[lastSP][$searchParams[page_table]."-".$searchParams[place]] = $comparationSP;
		if ($_GET[page] < 1)
			$_GET[page] = 1;
		$_GET[place] = $searchParams[place];
		$_GET[page_table] = $searchParams[page_table];
	}

	if ($aGlobal)
		$aGlobal = unserialize($aGlobal);
	if ($aGlobal) {
		//damit globale variablen funktionieren mit ajax 
		if ($aGlobal['aPagingRecursivePath'])
			$aPagingRecursivePath = $aGlobal['aPagingRecursivePath'];
		if ($aGlobal['aNTo1TablePath'])
			$aNTo1TablePath = $aGlobal['aNTo1TablePath'];	
		if ($aGlobal['sDisplayTableRecursivePath']) 
			$sDisplayTableRecursivePath = $aGlobal['sDisplayTableRecursivePath'];
		if ($aGlobal['lastRowIdNToM']) 
			$lastRowIdNToM = $aGlobal['lastRowIdNToM'];
		if ($aGlobal['lastTableNameNToM']) 
			$lastTableNameNToM = $aGlobal['lastTableNameNToM'];
	}
	
	$p = func_get_args();
	//echo "<pre>";
	//print_r($p);
	//echo "</pre>";
	for ($i=0; $i<24; $i++) {
		if (!$p[$i])
			$p[$i] = "null";
	}
	
	if (!$ajaxExec) {
		$s = "";
		$id = md5(rand(0,10000000000)); 
		$p[11] = $id ; //ajaxExec  
		if (strpos($_SERVER['REQUEST_URI'],"ajax.php")) {
			$p[24] = $sBeforeAjaxQueryString;
		} else {
			$p[24] = $_SERVER['REQUEST_URI']; //sBeforeAjaxQueryString 
		}
		//pre($p);
		//$arg_list = urlencode( serialize($p)); 
		$_SESSION[ajaxParameter][$id] = $p;
		$par[id] = $id; 
		$par[sp] = serialize($searchParams); 
		$arg_list = urlencode( serialize($par));
		$op .=  "<img src='".RELATIVEPATH."/image/loading.gif' class='loa' style='$s' id='l_$id'><div  id='s_$id' style='$s;display:block'></div><div id='".$id."'></div>";
	 	if (!$webuser) {
			$pa = "/admin";
		} else 
			$pp = "?projectpath=";
		
		$op .=  "<script>
		jQuery(function() {
			var in".$id." = setInterval(ci, 1000);
			function ci() {
				if (jQuery('#s_".$id."').visible()) {
					window.clearInterval(in".$id.");
					jQuery.ajax({
						method: \"POST\",
						url: \"".RELATIVEPATH.$pa."/ajax.php".$pp."\", 
						success: function(msg) {
							jQuery('#s_".$id."').hide();
							jQuery('#l_".$id."').hide();
							jQuery('#".$id."').hide().html(msg).slideDown('slow');
						},
						data: { 
							func: \"dt\", 
							param: \"$arg_list\" 
						}
					});
				}
			}
		});
		</script>";
		if ($sTableType == "ntom" or $sTableType == "nto1input" or $sTableType == "nto1output" or $sTableType == "noecho") {
			return $op;
		} else {
			echo $op;
			return;
		}
	} else {
		if($tableOrId == "e") {
		//sicherheit, darf in ajax nur displayTable ausführen und die variablen werden zuvor in Sitzung geschrieben nur ajaxexec wird mitgegeben, muss testen ob irgendwie variablen manipulieren kann, todo
			$pn = $_SESSION[ajaxParameter][$p[11]];
			$pn[11] = $p[11];
			if ($p[12] and $p[12] != null) 
				$pn[12] = $p[12]; 
			if ($pn[9] == "ntom" or $pn[9] == "nto1input" or $pn[9] == "nto1output" or $pn[9] == "noecho") {
					call_user_func_array('displayTable' , $pn);
			} else {
				echo call_user_func_array('displayTable' , $pn);
			} 
			exit();
		} else {
			$t = getTableProperties($_SESSION[ajaxParameter][$p[11]][0]);
			//$t = getTableProperties("sdasdasdaf");
			if ($t) {
				$pn = $_SESSION[ajaxParameter][$p[11]];
				$arg_list = urlencode(serialize($pn));
			} else {
				//wurde wohl ausgeloggt, muss reloaden
				echo "<script>window.location.reload();</script>";
				exit();	
			}
		}
	}

	$aTableProperties = getTableProperties($tableOrId);
	if (is_numeric($tableOrId)) {
		$table = $aTableProperties[name];
		$tableId = $aTableProperties[id];
	} else {
		$table = $tableOrId;
		$tableId = "";
	}
	if (!$sComingFromRelations)
		$sComingFromRelations = $tableId;
	//editable, deletable, addable werden erst aus Tabelleneigenschaften gelesen und von Parametern überschrieben
	if (!$webuser)
		$tU = $_SESSION[user];
	else
		$tU = $webuser;
	if (!$editable)
		if (inSerializedArray($tU, $aTableProperties[editors]))
			$editable = "yes";
	if (!$deletable)
		if (inSerializedArray($tU, $aTableProperties[deletors]))
			$deletable = "yes";
	if (!$addable)
		if (inSerializedArray($tU, $aTableProperties[addors]))
			$addable = "yes";
			
	
	$aNTo1TablePath[]=c($table)."-".$tableId;
	if ($sComingFrom) {
		if (strpos($sComingFrom,"_")) {
			preg_match("/(_[0-9]+$)/",$sComingFrom,$t);
			$aPagingRecursivePath[str_replace($t[1],"",$sComingFrom)]=str_replace("_","",$t[1]);
		}
	} else 
		$aPagingRecursivePath = array();
	$place = md5(@implode("/",$aPagingRecursivePath));
	
	if (strpos("a".$table, "assign_") == 1) {
		$sIsAssignmentTable = "yes";
	} else {
		$sIsAssignmentTable = "no";
	}
	//echo "<pre>";
	//print_r($aPagingRecursivePath);
	//echo $sComingFrom;
	//echo "<br>".$place;
	//echo "</pre>";
	//print_r($table);
	if (is_array($table)) {
		return;
	}
	
	$sDisplayTableRecursivePath++;
	$aDisplayTableRecursivePath[$sDisplayTableRecursivePath] = $sComingFrom;
	if ($tableId)
		$aTableProp=getTableProperties($tableId); 
	else
		$aTableProp=getTableProperties($table); 
	//paging 
	//Seite auf null zur&uuml;cksetzen wenn Relationsfilter ausgef&uuml;hrt wird

	//pre($searchParams);
	//Liest suchparameter in Sitzung
	if (is_array($searchParams)) {
		if ($searchParams[place])
			$_SESSION[aActiveSearchesRelations][$searchParams[place]][$searchParams[page_table]] = $searchParams;
	}
	//limit von conf_tables nehmen
	if ($aTableProp[entries_per_page]) {
		$limit = $aTableProp[entries_per_page];
	}
	if ($paging == "yes") {
		if ($_POST['execFilter'])
			$_GET['page'] = $table."_page_0";
		if ($_GET['page'] != "") {
			//$aPage=explode("_page_",$_GET['page']);
			if ($_GET[place])
				$_SESSION[aActivePagesRelations][$_GET[place]][$_GET['page_table']] = $_GET['page'];
			else
				$_SESSION[aActivePages][$_GET['page_table']] = $_GET['page'];
		}
		//erstellt Limit für Anfrage von Aktiven Seiten
		//echo "<pre>";
		//print_r($_SESSION[aActivePagesRelations]);
		//print_r($_GET);
		//echo "</pre>";
		
		$limitSql = buildLimit($place, $table, $tableId, $limit);
		
	}
	//$op .= $limitSql;
	//Aktuelle Tabelle auf visible schalten
	if ($aPage[0] != "") {
		/*$op .=  "<script type='text/javascript'>
		an('$aPage[0]');
		</script>";*/
	}
	
	if ($condition == "" and !$queryOver2)
		$sc = " 1=1 ";
	//pre($_SESSION[aActiveSearchesRelations]);
	//Erstellt Suchfilter ab den aktiven Suchfeldern für Relationen
	if (is_array($_SESSION[aActiveSearchesRelations])) {
		foreach ($_SESSION[aActiveSearchesRelations] as $sPlace => $aActiveTable) {
			//echo "$sPlace == $place";
			if ($sPlace == $place) {
				foreach ($aActiveTable as $sActiveTable => $sessionsp) {
					//echo "$sActiveTable == $table";
					if ($sActiveTable == $table."-".$tableId) {
						$selectPortion = str_replace(strstr($queryOver2, "FROM"),"",$queryOver2);
						if ($sessionsp[order]) {
							$fieldExists = getFieldProperties($table, $sessionsp[order]);
							//wenn queryover2 und feldname kommt in queryover select teil vor und wenn Feld nicht gibt in $table
							//echo "(".count(fieldExists)." and ".strlen($queryOver2)." and ".strpos($selectPortion, $sessionsp[order]);
							if (!count($fieldExists) 
							and strlen($queryOver2) 
							and strpos($selectPortion, str_replace(" DESC", "", $sessionsp[order])))
								$orderSql = " $sessionsp[order] ";
							else 
								$orderSql = " $table.$sessionsp[order] ";
						}
						if ($sessionsp) {
							
							foreach ($sessionsp as $k => $v) {
								if (strpos($k, "earch_") == 1){
									$fieldName = str_replace("search_","",$k);
									$fieldExists = getFieldProperties($table, $fieldName);
									//echo !count($fieldExists)." and ".strlen($queryOver2)." and ".strpos($selectPortion, $fieldName);
									//Hol aus queryover betreffende Funktion der Auswahlbezeichnung
									preg_match("/([\(\)a-zA-Z0-9_\.]+) *[as]{0,2} +$fieldName/", $selectPortion, $t);
									if (!count($fieldExists) 
									and strlen($queryOver2) 
									and strpos($selectPortion, $fieldName)) {
										if ($t[1])
											$sh .= " HAVING ".$t[1]." = '$v' ";					
									} else
										$sc .= " AND $table.".$fieldName." LIKE '%$v%' ";
								}
							}
						}
						$dontDelete = 1;
						break;
					}
				}
					if ($dontDelete != 1)
				$sessionsp = "";
			}
		}
	}
	//echo $orderSql;
	//nimm standart sortierung und limit aus conf_tables
	if (!$orderSql and $aTableProp[sort_order]) {
		$orderSql = " $table.$aTableProp[sort_order] $aTableProp[sort_order_ascdesc] ";
	}
/*echo "<pre>";
echo "$table-$tableId";
echo "searchparams";
print_r($searchParams);
		print_r($_SESSION[aActiveSearchesRelations]);
		echo "sessionsp";
		print_r($sessionsp);
		echo "sc";
		print_r($sc);
	echo "</pre>";*/
	//echo "vor query";
	$sc = $sc.$sh;
	if ($queryOver2 != "") {
		//echo "queryover";
		$arrTableCount = array();
		//print_r($queryOver2);
		if ($limitSql)
			$ls = " LIMIT ".$limitSql;
		if ($orderSql)
			$os = " ORDER BY ".$orderSql;
		if ($sc) {
			if (strpos($sc, "AND") != 1 and strpos($sc, "AND") != 2 and strpos($sc, "and") != 1 and strpos($sc, "and") != 2)
				$sco = " AND ".$sc;
			else
				$sco = " ".$sc;
		}
		//Todo order muss auch mitgegeben werden wenn seite und suche geändert werden
		if (preg_match('/(.+)group by (.+)/is', $queryOver2, $t)) {
			$queryOver2 = $t[1].$sco." GROUP BY ".$t[2];
		} else
			$queryOver2 = $queryOver2.$sco;
			
		$q = $queryOver2.$os.$ls;
		//$op .=  $q;
		if (strpos($q, "ORDER"))
			$q = str_replace(strrchr($q, "ORDER"),"",$q);
		$q2 = "SELECT count(*) ".strstr($q,"FROM");
		//$q2 = str_replace("SELECT", "SELECT count(*),", $q);
		$countAllEntries = dbQuery($q2);

		if ($_SESSION[aActivePagesRelations][$place][$table."-".$tableId] * $limit > $countAllEntries[0]['count(*)']) {
			$_SESSION[aActivePagesRelations][$place][$table."-".$tableId] = ceil($countAllEntries[0]['count(*)'] / $limit);
			$limitSql = buildLimit($place, $table, $tableId, $limit);
			if ($limitSql)
				$ls = " LIMIT ".$limitSql;
			$q = $queryOver2.$os.$ls;
			$query_export = $queryOver2.$os;
		}
		//echo $q;
		$arrTableContent = dbQuery($q);
		
		//print_r($countAllEntries);
	} else {
		//echo "normal";
		if ($_SESSION['NTo1Filter'][$table] != "") {
			$identifierNTo1 = getIdentifierFromSourceTableNTo1($table);
			$condition = $condition. " $identifierNTo1 = '".$_SESSION[NTo1Filter][$table]."' ";
		}
		if ($condition)
			$condition = "(".$condition.")";
		if (preg_match("/ id = '[0-9]+'/", $condition)){
			$limitSql = "";
		} else {
			$conditionOut = " WHERE ".$condition." ".$sc;
			
			$q = "SELECT count(*) as count FROM $table $conditionOut";
			
			$countAllEntries = dbQuery($q);

		}
		//muss limit neu bilden wenn zu gross eingegeben wird
		if ($_SESSION[aActivePagesRelations][$place][$table."-".$tableId] * $limit > $countAllEntries[0]['count']) {
			$_SESSION[aActivePagesRelations][$place][$table."-".$tableId] = ceil($countAllEntries[0]['count'] / $limit);
			$limitSql = buildLimit($place, $table, $tableId, $limit);
		}
		//echo  "$table, $condition $sc, $limitSql, $orderSql";
		//echo $condition." ".$sc;	
		$arrTableContent = selectRec($table, $condition." ".$sc, $limitSql, $orderSql);
		$query_export = "SELECT * FROM $table WHERE 1=1 AND $condition $sc";
		if ($orderSql)
			$query_export .= " ORDER BY $orderSql";
	}
	//pre($arrTableContent);
	//$op .=  "</pre>";
	$arrDepth=ArrayDepth($arrTableContent);
	if ($arrDepth == 1) {
		$arrTemp[1]=$arrTableContent;
		$arrTableContent=$arrTemp;
	}
	
	//Den Schl&uuml;ssel des obersten Arrays in den Wert der Id umwandeln
	if (is_array($arrTableContent)) {
		foreach ($arrTableContent as $key => $value) {
			if (is_numeric($key)) {
				
				foreach($value as $key2 => $value2) {
					if ($key2 == getIdName($table)) {
						//Wenn Werte aus Zuordnungstabelle muss Id von ZielTabelle plus Id von Zuordnungstabelle nehmen ansonsten kann nicht mehrmals selben Zieleintrag anzeigen
						if ($value[bncms_assign_id]) 
							$newKey = $value2."-".$value[bncms_assign_id];
						else
							$newKey = $value2;
						$value = removeAssociativeKeyFromArray($value,'bncms_assign_id');
						$arrNewTableContent[$newKey]=$value;
					}
				}
			}
		}
	}
	$arrTableContent=$arrNewTableContent;
	if (@$sessionsp[order])
		$ot = $sessionsp[order];
	$op .=  "<form method='post' action='' id='f_".$ajaxExec."'><input type=hidden value='".$arg_list."' id=arg_list_".$ajaxExec."><input type=hidden id=page_table value='$table-$tableId' class='c".$ajaxExec."'>
			<input type=hidden id=order name=order value='$ot' class='c".$ajaxExec."'>
			<input type=hidden id=place value=$place class='c".$ajaxExec."'>";
		if ($aTableProp[export_xls] or $aTableProp[export_csv]) {
			$op .= "<div class='expd'>";
			if ($aTableProp[export_xls]) {
				$op .= "<a href='".RELATIVEPATH."/export.php?t=xls&f=$ajaxExec' target='blank' class='exp'>Export als XLS</a> ";
				$_SESSION[$ajaxExec][export][query] = $query_export;
				$_SESSION[$ajaxExec][export][table] = $tableId;
				$_SESSION[$ajaxExec][export][userFunction] = $sUserFunction;
				$_SESSION[$ajaxExec][export][manualFieldProperties] = $aManualFieldProperties;
			}
			if ($aTableProp[export_csv]) {
				$op .= "<a href='".RELATIVEPATH."/export.php?t=csv&f=$ajaxExec' target='blank' class='exp'>Export als CSV</a> ";
				$_SESSION[$ajaxExec][export][query] = $query_export;
				$_SESSION[$ajaxExec][export][table] = $tableId;
				$_SESSION[$ajaxExec][export][userFunction] = $sUserFunction;
				$_SESSION[$ajaxExec][export][manualFieldProperties] = $aManualFieldProperties;
			}
			$op .= "</div>";
			//hardcode
			$op .= "<script>jQuery('#ppdf').html('<a href=\"pdf.php?t=xls&f=$ajaxExec\" target=\"blank\" class=\"exp\">Export als PDF</a>');</script>";
		}
	
		$op .=  "<div id='loading_overlay'></div>
<table class=\"table_overall $table\" cellspacing=\"0px\" cellpadding=\"0px\" id='loading_overall_table'>
<tr class=\"table_head\">";
	//Paging
	if ($paging == "yes" or ($sessionsp)) {
		//print_r($countAllEntries[0]);
		if ($countAllEntries[0][count])
			$iMaxPages = ceil($countAllEntries[0]['count'] / $limit);
		else
			$iMaxPages = ceil($countAllEntries[0]['count(*)'] / $limit);
		if ($iMaxPages > 1 ) {
			if ($iMaxPages > 1  or $sessionsp) {
				$op .=  "<td colspan=1000 class=td_toppaging><div class=\"table_paging\">";
						//$op .=  "<div style=\"position:absolute; left:-30px;\"><img src=\"".RELATIVEPATH."/image/icons/arrows-left-$_SESSION[style_color].gif\"></div>";
				if ($_SESSION[aActivePagesRelations][$place][$table."-".$tableId] == "0" or $_SESSION[aActivePagesRelations][$place][$table."-".$tableId] == "") {
					$_SESSION[aActivePagesRelations][$place][$table."-".$tableId] = 1;
				}
				$op .=  "<center>
				<div class='toppaging_button_small' onclick=\"jQuery('form#f_".$ajaxExec." .toppaging').val(1); ajax_submit('".$ajaxExec."','','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."');\"></div>
				<div class='toppaging_button br' onclick=\"jQuery('form#f_".$ajaxExec." .toppaging').val(".$_SESSION[aActivePagesRelations][$place][$table."-".$tableId]." -1); ajax_submit('".$ajaxExec."','','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."');\"></div>
				<input  class='c".$ajaxExec." display_table_paging_search toppaging' type=text id='page' onChange=\"console.log('onchange textfield'); ajax_submit('".$ajaxExec."','','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."');\" placeholder='".$_SESSION[aActivePagesRelations][$place][$table."-".$tableId]." / $iMaxPages'>
				<div class='toppaging_button bl' onclick=\"jQuery('form#f_".$ajaxExec." .toppaging').val(".$_SESSION[aActivePagesRelations][$place][$table."-".$tableId]." + 1); window.setTimeout(ajax_submit('".$ajaxExec."','','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."'),25);\"></div>
				<div class='toppaging_button_small' onclick=\"jQuery('form#f_".$ajaxExec." .toppaging').val(".$iMaxPages."); ajax_submit('".$ajaxExec."','','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."');\"></div></center>
				
				<script>
				
				jQuery('form#f_".$ajaxExec." .toppaging').each(function() {adaptWidthToText('placeholder',this)});
				jQuery('form#f_".$ajaxExec." .toppaging').keyup(function() {adaptWidthToText('val',this)});
				jQuery('form#f_".$ajaxExec." .toppaging').focus(function() {jQuery(this).attr('placeholder',''); adaptWidthToText('val',this)});
				jQuery('form#f_".$ajaxExec." .toppaging').blur(function() {
				if (jQuery(this).val() == '') {
					jQuery(this).attr('placeholder','".$_SESSION[aActivePagesRelations][$place][$table."-".$tableId]." / $iMaxPages');
					adaptWidthToText('placeholder',this);
				} else {
					adaptWidthToText('val',this);
				}
				});
				</script>
				";
				$pagingDisplayed = 1;
	
				$op .=  "
		</div></td></tr><tr class=\"table_head\">";
			}
		}
	}

		//n:1 Filter Dropdown ausgabe
	/*if (is_array($aRel['NTo1'][$table]) and $editable == "yes" and $sIsAssignmentTable != "yes") {
		$destTableNTo1=getDestFromSourceTableNTo1($table);
		$arrNTo1Filter = dbQuery("SELECT * FROM $destTableNTo1");
		$op .=  "<form action='index.php' method='post'>";
		$op .=  "<input type='hidden' name='execFilter' value='$table'>";
		$op .=  "Filter: <select name='NTo1Filter' onChange='this.form.submit()'>";
		$op .=  "<option value=''></option>";
		foreach ($arrNTo1Filter as $key => $value) {
			if ($_SESSION[NTo1Filter][$table] == $value[id]) 
				$selected = "selected";
			else 
				$selected = "";
			$op .=  "<option value='$value[id]' $selected >";
			$outPutFilter = "";
			foreach ($value as $key2 => $value2) {
				if ($value2 != "") {
					$outPutFilter .= $value2.", ";
				}
			}
			if (strlen($outPutFilter) > 100 ){
				$outPutFilter = substr($outPutFilter, 0,97)."...";
			}
			$op .=  $outPutFilter; 
			$op .=  "</option>";
		}
		$op .=  "</select>";
		//$op .=  "<input type='Submit'>";
		$op .=  "</form>";
	}*/
	
	if (!$queryOver2) {
		$q = "SHOW COLUMNS FROM $table";
		$arrTableColumnNames = dbQuery($q);
	} else {
		$atctest = dbQuery($queryOver2);
		foreach ($atctest as $k => $v) 
			foreach ($v as $k2 => $v2) {
				$f = 1;
				if (is_array($arrTableColumnNames))
				foreach ($arrTableColumnNames as $k3 => $v3) {
					//echo "$v3[Field] == $k2";
					//wenn noch nicht drin ist
					if ($v3[Field] == $k2)
						$f = 0;
				}
				if ($f == 1)
					$arrTableColumnNames[][Field] = $k2;
			}
	}
	
	$op .= "<td class=sidebar valign=top>";
	
	if ($isNToMDisplayEditEntry == "yes" and $sIsAssignmentTable == "no") {
		$a = extractComingFrom($sComingFrom);
		//print_r($a);
		$origTable = $a[0][0];
		$origTableId = $a[0][1];
		$origIdValue = $a[1];
		foreach ($aRel[NToM] as $k => $v) {
			if ($k == $tableId)
			foreach ($v as $k2 => $v2) {
			//echo $v2[destTable]." == ".$origTable."-".$origTableId;
				if ($v2[destTable] == $origTableId) {
					$aIdNameDestTable = $v2[destFieldname];
					//todo relations müssen über ids angesprochen werden
					$aActualRelation = getRelationProperties($v2[assignTable]);
				}
			}	
		}
		if (inSerializedArray($_SESSION[user],$aActualRelation[addors])) {
			$op .=  "<a onClick=\"opwin('edit_relation.php?action=new&idName=".$_GET[id]."&idValue=".$origIdValue."&sourceTable=$origTable&destTable=$table','EditRelation'); return false;\" href='#' title='Neue Referenz erstellen'><img src=\"".RELATIVEPATH."/image/icons/add-folder-$_SESSION[style_color].gif\"></a>";
			$colspan++;
		}
	}
	if ($editable == "yes") {
		if ($editable == "yes" and $isNToMDisplayEditEntry == "no" and $addable == "yes") {
			$sOut="<a href='#' onClick=\"ajax_send_scrollpos('".$_SERVER[PHP_SELF]."');
opwin('edit_entry.php?action=new&columnNameOfId=$columnNameOfId&table=$tableId','Edit'); return false;\" title=\"Neuen Eintrag erstellen\"><img src=\"".RELATIVEPATH."/image/icons/add-page-$_SESSION[style_color].gif\"></a>";
		} 
	} 
	$op .=  $sOut."</td>";
	//für Relationen mit separaten Icons Spalten erstellen
	/*$q = "SELECT * FROM conf_relation_visibility WHERE path REGEXP '^$sComingFromRelations-[0-9]+$'  AND (showWithEditIcons = 'Separat' OR showWithEditIcons = 'Beides')";
	$a = q($q,"",1);
	//pre($a);
	if (count($a)) {
		foreach ($a as $k => $v) {
			$iSwitchInColumnSeparat[$v[path]]=0;
			$op .=  "<td class='td_sort td_func td_$v[path]'></td>";
			$tds += 1;
			$tdsForSeparateIcons += 1;
		}
	}
	//Zählen wieviele tds durch edit, ausklappen usw reserviert werden müssen
	//hardcode
	$a = explode("_", $sComingFrom); 
	if ($table == 'products' and ($a[0] == "orders-2" or $a[0] == "orders-13")) {
		$tds += 3;
	}
	if ($checkable) {
		$tds += 1;
	}
	if ($showRelations == "yes") {
		$tds += 1;
	}
	if ($isNToMDisplayEditEntry == "yes") {
		if (inSerializedArray($_SESSION[user],$aActualRelation[deletors]))
		$tds += 1;
	}
	if ($editable == "yes" ) {
		$tds += 1;
	} 
	if ($addable == "yes" ) {
		$tds += 1;
	} 
	if ($deletable == "yes" ) {
		$tds += 1;
	} 
	$mustAddTds = ($tds - $colspan) - $tdsForSeparateIcons;
	for ($i = 0; $i < $mustAddTds; $i++) {
		if ($i == 0)
			$op .=  "<td class='td_sort td_func td_relations'></td>";
		else
			$op .=  "<td class='td sort td_func'></td>";
		$colspan++;
	}
	$op .=  $sOut;*/
	
	//Spaltennamen sortierbar
	foreach ($arrTableColumnNames as $key => $column) {
		$f = getFieldProperties($tableId,$column['Field']);
		if ($queryOver2 and !$f)
			$f = 1;
		if (($aRightsHidden[$tableId][$column['Field']] or  @$aManualFieldProperties[$table."-".$tableId][$column['Field']][hidden] or !$f) and @!$aManualFieldProperties[$table."-".$tableId][$column['Field']][visible])
		continue;
		
		if (@$sessionsp[order] == "".$column['Field']."")
			$oi = "<nobr><img src=\"".RELATIVEPATH."/image/icons/order-up-$_SESSION[style_color].gif\" style='vertical-align:baseline'>&nbsp;</nobr>";
		elseif (@$sessionsp[order] == "".$column['Field']." DESC")
			$oi = "<nobr><img src=\"".RELATIVEPATH."/image/icons/order-down-$_SESSION[style_color].gif\" style='vertical-align:baseline'>&nbsp;</nobr>"; 
		else 
			$oi = "";
		
			$o = "`".$column['Field']."`";
		if ($f[title])
			$of = $f[title];
		else
			$of = $column['Field'];	
		$op .=  "<td valign='top' class='td_sort $column[Field]'>$oi<a href='javascript:void(0);' onclick=\"
		if (jQuery('form#f_".$ajaxExec." #order').val() == '$column[Field]')
			jQuery('form#f_".$ajaxExec." #order').val('$column[Field] DESC');
		else 
			jQuery('form#f_".$ajaxExec." #order').val('$column[Field]'); 
		 ajax_submit('".$ajaxExec."','order=".$o."','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."');\" title='$column[Field]'>".$of."</a></td>";
	}
	if ($additionalColumn) {
		$op .=  "<td class='td_sort additional'></td>";
	}
	
	//hole spaltennamen von zuordnungstabelle		
	if ($sTableType == "ntom") {
		$c = explode("_", $sComingFrom);
		$t = explode("-", $c[0]);
		
		$n = getAssignmentTableName($tableId, $t[1]);
		$aColumnNames = dbQuery("SHOW COLUMNS FROM $n");
		$fn = getAssignmentFieldNames($tableId, $t[1]);
		foreach ($aColumnNames as $kc => $column) {
			$tp = getTableProperties($n);
			$aRelationProperties = getRelationProperties($n);
			if ($tp[columnNameOfId]!= $column['Field'] and $column['Field'] != $fn[sourceFieldname] and $column['Field'] != $fn[destFieldname]) {
				$f = getFieldProperties($n,$column['Field']);
				if ($f[title])
					$of = $f[title];
				else
					$of = $column['Field'];
					if ($isNToMDisplayEditEntry == "yes" and $aRelationProperties[seperateColumns] != "on")
						$op .= "<td class='td_sort $kc assign' valign=top>".$of."</td>";
				$ofc++;
			}
		}
	}
	/*$css="";
	if (is_array($iSwitchInColumnSeparat))
	foreach ($iSwitchInColumnSeparat as $k => $v)
		$css .= "<td class='td_$k'></td>";
	if ($colspan) {
		$cs ="<td class='td_relations'></td>";
		if ($colspan-1 > 0)
			$cs .="<td colspan=".($colspan-1)." class='td_func'></td>";
	} else
		$cs = "";
	$op .=  "</tr><tr class=table_head>".$css.$cs;*/
	
	$op .=  "</tr><tr class=table_head><td class=sidebar></td>";
	
	//search
	if ( $searchable == "yes") {
		foreach ($arrTableColumnNames as $key => $column) {
			$f = getFieldProperties($tableId,$column['Field']);
			if ($queryOver2 and !$f)
				$f = 1;
			if (($aRightsHidden[$tableId][$column['Field']] or @$aManualFieldProperties[$table."-".$tableId][$column['Field']]['hidden'] or !$f) and @!$aManualFieldProperties[$table."-".$tableId][$column['Field']]['visible'])
				continue;
			if (@$sessionsp["search_".$column['Field']] != "")
				$v = " value='".$sessionsp["search_".$column['Field']]."' ";
			else 
				$v = ""; 
			$op .=  "
		<td valign='top' class='td_search $column[Field]'><input type='text' $v id='search_$column[Field]' class='display_table_paging_search c".$ajaxExec." search' onChange=\"ajax_submit('".$ajaxExec."','','".RELATIVEPATHAJAX."','".RELATIVEPATHAPP."');\"></td>";
		}
		if ($additionalColumn) {
			$op .=  "<td class='td_search table_head'></td>";
		}
		if ($ofc) {
			for ($i=0; $i < $ofc; $i++) {
				if ($isNToMDisplayEditEntry == "yes" and $aRelationProperties[seperateColumns] != "on")
					$op .=  "<td class='td_search table_head assign'></td>";
			}	
		}
	}
	//Am ende des Tableheaders Zusatz Zelle f&uuml;r Ausdehnung der Tabelle nach rechts durch andere Tabellen
	if ($queryOver != "") {
		//todo muss Relationen mit IDs ansprechen nicht über Tabellennamen, weil so kann nur eine Relation pro Tabellenpaar haben
		$a = extractComingFrom($sComingFrom);
		$aIdentifierNToM = getIdentifierNToM($tableId, $a[0][1]);
		//echo "$tableId, ".$a[0][1];
		$sAssignTable = getAssignTableNToM($tableId, $a[0][1]);
		$sAssignTableProp = getTableProperties($sAssignTable);
		$aRelationProperties = getRelationProperties($sAssignTable);
		//echo "<pre>";
		//print_r($aRelationProperties);
		//echo "</pre>";
		$q = $queryOver.$sco.$os.$ls;
		$arrTableContentAss = dbQuery($q);
		//$op .= $q;
		//print_r($arrTableContentAss);
		//exit();
		$arrDepth=ArrayDepth($arrTableContentAss);
		if ($arrDepth == 1) {
			$arrTemp[1]=$arrTableContentAss;
			$arrTableContentAss=$arrTemp;
		}
		if (is_array($arrTableContentAss)) {
			foreach ($arrTableContentAss as $key => $value) {
				if (is_numeric($key))
				$arrTableContent[$value[$aIdentifierNToM[0]]."-".$value[id]][assign]=$value;
			}
		}
	} 
	$op .=  " </form></tr>";
	if ($isNToMDisplayEditEntry == "yes") {
		$op .=  "
		<form action='index.php' method='post'>";
	}
	if (is_array($arrTableContent)) {
		foreach ($arrTableContent as $key => $row) {
			if ($iZebra == 1) {
				$sStyle = " td_zebra ";
				$$iZebra = 0;
			} else {
				$sStyle = "";
				$$iZebra = 1;
			}
			$op .=  "
		<tr id=\"tr_".$table."-".$tableId."_".$row[$columnNameOfId]."\" class=\"$sStyle tr_".$table."-".$tableId."_normal tr_".$table."-".$tableId."_".$row[$columnNameOfId]."\" >
		";
			$sDisplayTableRecursivePathOut = md5(implode($aDisplayTableRecursivePath));	
			if ($row[$columnNameOfId]) {
				if ($checkable) {
					if ($checkable == "checkbox") {
						$cf = str_replace("{id}", $row[$columnNameOfId], $checkableFunction);
						$op .=  "<td valign=\"top\" class=\"td_func table_sidebar\"><input type=checkbox name='checkbox_".$table."-".$tableId."_".$row[$columnNameOfId]."' onclick=\"".$cf."\" id='checkbox_".$table."-".$tableId."_".$row[$columnNameOfId]."' class='checkbox'><label for=\"checkbox_".$table."-".$tableId."_".$row[$columnNameOfId]."\"></label></td>";
					}
					if ($checkable == "radio") {
						
						//echo $checkableFunction = preg_replace('/\{([\w\]\[]+)\}/',"\$$1",$checkableFunction);
						/*preg_match_all('/\{([\$\'\w\]\[]+)\}/',$checkableFunction,$matches);
						print_r($matches[1][0]);
						if ( isset($matches[1][0])) {
							$r = compact("row[id]");
							print_r($r);
							foreach ( $r as $var => $value ) {
								$checkableFunction = str_replace('{$'.$var.'}',$value,$checkableFunction);
							}
						}*/
						$cf = str_replace("{id}", $row[$columnNameOfId], $checkableFunction);
						$op .=  "<td valign=\"top\" class=\"td_func table_sidebar\"><input type=radio name='$table-$tableId' value='".$row[$columnNameOfId]."' onclick=\"".$cf."\" id='radio_".$table."-".$tableId."_".$row[$columnNameOfId]."'><label for=\"radio_".$table."-".$tableId."_".$row[$columnNameOfId]."\"></label></td>";
					}
				}

				//anzeige relationen mit separaten icons
				$q = "SELECT * FROM conf_relation_visibility WHERE path REGEXP '^$sComingFromRelations-[0-9]+$'  AND (showWithEditIcons = 'Separat' OR showWithEditIcons = 'Beides')";
				$a = q($q,"",1);
				//pre($a);
				if (count($a)) {
					foreach ($a as $k => $v) {
						//pre($v);
						$op .=  "
						<td valign=\"top\" class=\"td_func table_sidebar td_$v[path]\"><div id=\"icon_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_switchout_$sDisplayTableRecursivePathOut_".$v[path]."\" style=\"display:none\">";
						$op .=  displayVisibilityButtons(
							"", 
							"div_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_switchout_$sDisplayTableRecursivePathOut_".$v[path], 
							$v[title],
							1,
							$v[icon]
						);	
						$op .= "</div>
						</td>";
					}
				}
				if ($showRelations == "yes") {
					$op .=  "<div id=\"".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_switchout_$sDisplayTableRecursivePathOut\" style=\"display:none\">";
					$op .=  displayVisibilityButtons("", $table."-".$tableId."_".$row[$columnNameOfId]."_relations_$sDisplayTableRecursivePathOut", "Relationen des Eintrags &ouml;ffnen",1);	
					$op .=  "</div>
					";
				}
				if ($isNToMDisplayEditEntry == "yes") {
					if (inSerializedArray($_SESSION[user],$aActualRelation[deletors])) {
						$op .=  "
						<a href='#' onClick=\"ajax_send_scrollpos('".$_SERVER[PHP_SELF]."');
		opwin('index.php?id=".$row[assign][getIdName($sAssignTable)]."&table=".$sAssignTable."&action=delete','Delete'); return false;\" title=\"Referenz l&ouml;schen\"><img src=\"".RELATIVEPATH."/image/icons/delete-page-$_SESSION[style_color].gif\"></a>";
					}
				}
				if ($editable == "yes" ) {
					if ($sIsAssignmentTable == "yes") {
						$sWindowName = "Editrelation";
					} else {
						$sWindowName = "Edit";
					}
					$op .=  "
				
					<a onClick=\"opwin('edit_entry.php?id=$row[$columnNameOfId]&columnNameOfId=$columnNameOfId&table=$tableId','".$sWindowName."'); return false;\" href=\"#\" title=\"Eintrag &auml;ndern\"><img src=\"".RELATIVEPATH."/image/icons/edit-page-$_SESSION[style_color].gif\"></a>
				";
				} 
				if ($deletable == "yes") {
					$op .=  "<a onClick=\"opwin('index.php?action=delete&id=$row[$columnNameOfId]&columnNameOfId=$columnNameOfId&table=$table','Delete'); return false;\" href=\"#\" title=\"Eintrag l&ouml;schen\"><img src=\"".RELATIVEPATH."/image/icons/delete-page-$_SESSION[style_color].gif\"></a>";
				}
				if ($addable == "yes") {
					$op .= "<a onClick=\"opwin('edit_entry.php?duplicate=true&id=$row[$columnNameOfId]&columnNameOfId=$columnNameOfId&table=$tableId','Edit'); return false;\" href=\"#\" title=\"Eintrag duplizieren\"><img src=\"".RELATIVEPATH."/image/icons/duplicate-$_SESSION[style_color].gif\"></a>";
				}
				
			}//if ($row[$columnNameOfId]) {
			
			$iZebra = $iZebra +1;
			if ($iZebra > 1) {
				$iZebra  = 0;
			}
			//$iSwitchInColumn = 0;
			foreach ($row as $key => $field) {
				$iNtoMFound=0;
				//$iSwitchInDot = 0;
				if (!is_numeric($key)) {
					//Pr&uuml;fen ob Werte aus der Assignment Tabelle vorhanden sind
					$fieldFromArray="";
					if (is_array($field)) {
						
						
						
						
						$op .= "<td class=sidebar valign=top>";
						preg_match("/\-([0-9])+\-a$/", $sComingFromRelations, $t);
						$q = "SELECT * FROM conf_relations WHERE id = '$t[1]'";
						$ar = q($q);
						//pre($a);
						$q = "SELECT * FROM conf_tables WHERE name = '$ar[name]'";
						$b = q($q,"",1);
						//pre($b);
						//todo muss das auflösen, es gibt zwei konfigurierte Relationen die beide auf die selbe zuordnungstabelle zeigen, es ist daher nicht möglich tableId zuverlässig zu holen, man weiss eigentlich nicht zu welcher Relation die angezeigten Einträge gehören
						
						//anzeige relationen mit separaten icons
						$q = "SELECT * FROM conf_relation_visibility WHERE path REGEXP '^$sComingFromRelations-[0-9]+$'  AND (showWithEditIcons = 'Separat' OR showWithEditIcons = 'Beides')";
						$a = q($q,"",1);
						//pre($a);
						if (count($a)) {
							foreach ($a as $k => $v) {
								//pre($v);
								
								//$op .= "div_".$ar[name]."-".$b[0][id]."_".$field[$b[0][columnNameOfId]]."_relations_".$sDisplayTableRecursivePathOut."_".$v[path];
								$op .=  "<div class=sidebar-item id=\"icon_".$ar[name]."-".$b[0][id]."_".$field[$b[0][columnNameOfId]]."_relations_".$sDisplayTableRecursivePathOut."_".$v[path]."\" style=\"display:none\">";
								$op .=  displayVisibilityButtons(
									"", 
									"div_".$ar[name]."-".$b[0][id]."_".$field[$b[0][columnNameOfId]]."_relations_".$sDisplayTableRecursivePathOut."_".$v[path], 
									$v[title],
									1,
									$v[icon]
								);	
								$op .= "</div>";
							}
						}
						if ($showRelations) {
							$op .=  "<div class=sidebar-item id=\"icon_".$ar[name]."-".$b[0][id]."_".$field[$b[0][columnNameOfId]]."_relations_".$sDisplayTableRecursivePathOut."\" style=\"display:none\">";
							$op .=  displayVisibilityButtons(
								"", 
								"div_".$ar[name]."-".$b[0][id]."_".$field[$b[0][columnNameOfId]]."_relations_".$sDisplayTableRecursivePathOut, 
								"Relationen des Eintrags &ouml;ffnen",
								1
							);	
							$op .=  "</div>";
						}
						$op .= "</nobr></td>";
						
						
						$oa = generateRelatedContent($sComingFromRelations, $ar[name], $b[0][id], $field, $sDisplayTableRecursivePathOut, $aNTo1TablePath, $arrTableColumnNames, $b[0][columnNameOfId], $iSwitchInColumnSeparatAssignment);
						//pre(htmlentities($oa[0]));
						if ($oa)
							$sRelatedContentNToMAssignment = $oa;

						
						
						foreach ($field as $key2 => $value) {
							
							if (@!in_array($key2, $aIdentifierNToM)) {
								//print_r($aRelationProperties);
								
								if ($aRelationProperties[seperateColumns] == "on") {
									$fp = getFieldProperties($sAssignTable, $key2);
									if ($fp[title])
										$kou = "<b>".$fp[title]."</b><br>";
									if ($fp[name])
										$kou = "<b>".$fp[name]."</b><br>";
									if ($value)
										$display = 1;
									else
										$display = 0;
								} else {
									$kou = "";
									$display = 1;
								}
								
								if ($isNToMDisplayEditEntry == "yes") {
									//Schreibrechte
									
									if ($key2 != 'id' and 
									getIdName($sAssignTable) != $key2 and 
									$key2 != $aIdentifierNToM[0] and 
									$key2 != $aIdentifierNToM[1]) {
									
									if ($display) {

											if ((!$aRightsHidden[$sAssignTable][$key2] and @!$aManualFieldProperties[$sAssignTableProp[name]."-".$sAssignTableProp[id]][$key2][hidden]) or @$aManualFieldProperties[$sAssignTableProp[name]."-".$sAssignTableProp[id]][$key2][visible]) 
										$op .= "<td valign='top' class='$sStyle assign'>
										$kou".
										generateField(
											$sAssignTable, 
											$key2, 
											$value, 
											"edit", 
											$aManualFieldProperties, 
											$field[getIdName($sAssignTable)]."_$key2",
											"",
											"",
											$row,
											$sUserFunction,
											$sComingFrom."_".c($table)."-".$tableId."_".$row[id]
										)
										."</td>";
										}
									}
								} else {
									//Leserechte
									if ($key2 != 'id' and 
									getIdName($sAssignTable) != $key2 and 
									$key2 != $aIdentifierNToM[0] and 
									$key2 != $aIdentifierNToM[1]) {
										if ($display) {
											//hardcode
			if ($value == "active")
				$cla = "style='background-color:lightgreen;'";
			elseif ($value == "inactive")
				$cla = "style='background-color:lightred;'";
			else
				$cla = "";
												if ((!$aRightsHidden[$sAssignTable][$key2] and @!$aManualFieldProperties[$sAssignTableProp[name]."-".$sAssignTableProp[id]][$key2][hidden]) or @$aManualFieldProperties[$sAssignTableProp[name]."-".$sAssignTableProp[id]][$key2][visible]) 
											$op .=  "<td valign='top' class='$sStyle assign' $cla>$kou".
											generateField(
											$sAssignTable, 
											$key2, 
											$value, 
											"view", 
											$aManualFieldProperties, 
											"",
											"",
											"",
											$row,
											$sUserFunction,
											$sComingFrom."_".c($table)."-".$tableId."_".$row[id])
											."</td>";
										}
									}
								}
								$iNtoMFound=1;
								//Ermitteln ob Feld eine n zu 1 enth&auml;lt
								$aLastFieldArray = $field;
							}
						}
					}
					if (is_array($field))
						continue;
						//print_r($row);
						/*echo "$tableId, 
					$key, 
					$field, 
					'read', 
					$aManualFieldProperties, 
					'',
					'',
					'',
					$row,
					$sUserFunction,
					$sComingFrom";*/
					//hardcode
			
			if ($field == "active")
				$cla = "style='background-color:lightgreen;'";
			elseif ($field == "inactive")
				$cla = "style='background-color:#FFaaaa;'";
			else
				$cla = "";
					$field = generateField(
					$tableId, 
					$key, 
					$field, 
					"view", 
					$aManualFieldProperties, 
					"",
					"",
					"",
					$row,
					$sUserFunction,
					$sComingFrom); 
					$f = getFieldProperties($tableId,$key);
					if ($queryOver2 and !$f)
						$f = 1;
					if ((!$aRightsHidden[$tableId][$key] and @!$aManualFieldProperties[$table."-".$tableId][$key][hidden] and $f) or @$aManualFieldProperties[$table."-".$tableId][$key][visible]) {
						$op .=  "
						<td valign='top' class='$key' $cla><div>";
						$op .=  "
						".$field."</div></td>";
					}
				}
			}
			if ($additionalColumn) {
				$o = str_replace("[id]",$row[$columnNameOfId], $additionalColumn);
				if ($sUserFunction) {
					$o = call_user_func_array($sUserFunction, array($o, 'additional', $row));
				}
				$op .=  "<td class='additional' valign='top'>$o</td>";
			}
			//Am ende der Zeilen Zusatz Zelle f&uuml;r Ausdehnung der Tabelle nach rechts durch andere Tabellen
			//$showRelations = 0;
			if ($showRelations == "yes") {
				if ($isNToMDisplayEditEntry == "yes" ) {
					if (strpos("a".$_GET[table], "assign_") != 1 and strpos("a".$table, "assign_") != 1 and $_GET[id] and $row[$columnNameOfId]) {
						//Einh&auml;ngepunkt EditRow Assignmenttabelle
						$query = "SELECT * FROM conf_tables WHERE name = 'assign_$_GET[table]_$table' or name = 'assign_".$table."_".$_GET[table]."'";
						$aAssignTable = dbQuery($query);
						$op .=  "</tr><tr><td colspan=\"10\">";
						$op .=  displayTable(
						$aAssignTable[0]['id'], 
						$aAssignTable[0]['columnNameOfId'], 
						" id_$_GET[table] = '".$_GET[id]."' AND id_$table = '".$row[$columnNameOfId]."' ", 
						"", 
						"", 
						"yes", 
						"", 
						"yes",
						"",
						"",
						5,
						0,
						0,
						packGlobals()
						);
						$op .=  "</td></tr><tr>";
					}
				}
				
				//$op .= "<pre>".print_r($aNTo1TablePath,1)."<pre>";
				$op .=  "
		</tr><tr><td valign='top' colspan='".(count($arrTableColumnNames)+3)."'  class=\"table_relations_spacer\">";
		
				$test = 1;
				$oa = generateRelatedContent(preg_replace("/-a$/","",$sComingFromRelations), $table, $tableId, $row, $sDisplayTableRecursivePathOut, $aNTo1TablePath, $arrTableColumnNames, $columnNameOfId, $iSwitchInColumnSeparat);
				//$op .= "$sComingFromRelations, $table, $tableId, $row, $sDisplayTableRecursivePathOut, $aNTo1TablePath, $arrTableColumnNames, $columnNameOfId, $iSwitchInColumnSeparat";
				$op .= $oa;
				$op .= $sRelatedContentNToMAssignment;
				$op .=  "</td>";
				if ($sTableType == "normal") {
					$aNTo1TablePath = array(st($table)."-".$tableId);
				}
			}//showRelations
		}
	}//Foreach arrTableContent eof
	
	if ( $isNToMDisplayEditEntry=="yes") {
		$a = extractComingFrom($sComingFrom);
		$sAssignTableNToM=getAssignTableNToM($tableId, $a[0][1]);
		$aIdNameNToM = getIdentifierNToM($tableId, $a[0][1]);
		$_SESSION['assignTableName']=$sAssignTableNToM;
		$_SESSION['sourceTableName']=$lastTableNameNToM;
				
		$op .=  "
		</tr>
		<td valign='top' colspan='5'>
		<input type='hidden' name='table' value='$table'>
		<input type='hidden' name='tableId' value='$tableId'>
		<input type='hidden' name='assignTable' value='$sAssignTableNToM'>
		<input type='hidden' name='columnNameOfId' value='$columnNameOfId'>	
		<input type='hidden' name='id' value='$id'>	
		<input type='hidden' name='saveAssignTableValues' value='1'>
		<input type='Submit' value='Verbindungstabellen Daten speichern' class='submit'></td>
		";
	}
	$op .= "
</table>";
	//keine Relation wurde angezeigt kann Spalte verbergen
	//$op .= pre($iSwitchInColumnSeparat,1);
	if (is_array($iSwitchInColumnSeparat))
	foreach ($iSwitchInColumnSeparat as $k => $v) {
		if ($v == 0)
			$op .= "<script>jQuery('#f_".$ajaxExec." .td_$k').css('display','none');</script>";
	}
	if (!$iSwitchInColumn and !$checkable) 
		$op .= "<script>jQuery('#f_".$ajaxExec." .td_relations').css('display','none');</script>";
		//echo "<pre>asdf";
		//print_r($_SESSION);
		//echo "</pre>";
	//alle $sDisplayTableRecursivePathOut relationen ebenen einblenden nachdem durch ajax dargestellt wurde
	if (is_array($_SESSION[aVisibleLayers][$sBeforeAjaxQueryString])) {
		foreach ($_SESSION[aVisibleLayers][$sBeforeAjaxQueryString] as $key => $value) {
			if (strpos($value, $sDisplayTableRecursivePathOut) and strpos("a".$value, $table) == 1)
				$op .= "
				<script type='text/javascript'>
				anschalten('$value');
				</script>";
		}
	}
	$aDisplayTableRecursivePath[$sDisplayTableRecursivePath] = "";
	$sDisplayTableRecursivePath = $sDisplayTableRecursivePath - 1;
	echo $op;
	/*if ($ajaxExec != 0)
		return $op;
	else 
		echo $op;*/
}


function displayAssignRow ($columnNameOfId, $id, $table, $sourceTableName, $action) {
	global $aRightsUnchangeable, $aRel, $aProp, $aTable, $lastRowIdNToM;
	$aTablesNToM=array($table, $sourceTableName);
	
	//Tabellenname f&uuml;r Output bereitstellen
	foreach ($aTable as $key => $value) {
		if (in_array($value[name], $aTablesNToM)) {
			$langTable .= $value[lang].", ";
		}
	}
	$out = "";
	$out .= "<div class=\"display_assign_row\">
<table>
<tr><form action='index.php' target='_self' method='post'>
	<td valign='top' colspan=2><h2>Bezug &auml;ndern</h2>
	</td>
<tr>
</tr>
	<td valign='top'><div>Tabellen</div>
	</td>
	<td valign='top'><div>$_GET[sourceTable], $_GET[destTable]</div>
	</td>
</tr>

";
	$query="SELECT * FROM $_GET[sourceTable] WHERE id = '$_GET[idValue]'";
	$aSourceData = dbQuery($query);
	foreach ($aSourceData[0]  as $key => $content) {
		$sSourceData .= $content.", ";
	}
	$out .= "<tr><td>id_$_GET[sourceTable]<input type=\"hidden\" name=\"id_$_GET[sourceTable]\" value=\"".$_GET["idValue"]."\"></td><td>$sSourceData</td></tr>";
	$query="SELECT * FROM $_GET[destTable]";
	$aDestData = dbQuery($query);
	$sDestData .= "<select name=\"id_$_GET[destTable]\">";
	foreach ($aDestData as $count => $content) {
		//print_r($content);
		$i = getIdName($_GET[destTable]);
		$sDestData .= "<option value=\"".$content[$i]."\">";
		foreach ($content as $countField => $contentField) {
			$sDestData .= $contentField.", ";
		}
		$sDestData .= "</option>";
	}
	$sDestData .= "</select>";
	$out .= "<tr><td>id_$_GET[destTable]</td><td>$sDestData</td></tr>";
	if ($action == "new") {
		$out .= "<input type=\"hidden\" name=\"action\" value=\"new\">";
	}
	/*
	
	$arrRowContent=selectRec($table,"id='$id'");
	foreach ($arrRowContent[0] as $fieldName => $field) {
	$out .= "
<tr>
	<td valign='top'><div>".ucfirst($fieldName)."</div>
	</td>
	<td valign='top'>";
		//Ermitteln ob n:1 Relation vorhanden ist und Dropdown ausgeben
		//echo "[$table][$fieldName]";
		//print_r($aRel);
		if ($aRel['NTo1'][$table][$fieldName] != "") {
			$aRelTable=dbQuery("SELECT * FROM ".$aRel['NTo1'][$table][$fieldName]);
			$out .= "<select name='$fieldName'><option></option>";
			$arrDepth=ArrayDepth($aRelTable);
			if ($arrDepth == 1) {
				$arrTemp[1]=$aRelTable;
				$aRelTable=$arrTemp;
			}
			foreach ($aRelTable as $key => $value) {
				$selected = "";
				if ($field == $value[id]) {
					$selected = " selected ";
				}
				$out .= "<option value='$value[id]' $selected>";
				foreach ($value as $key2 => $value2) {
					if (is_numeric($value2)) {
						if ($key2 == "id") {
							$out .= $value2.", ";
						}
					} else {
						if (strlen($value2) > 70) {
							$value2 = substr($value2,0,70)."...";
						} else {
							$value2 = $value2;
						}
						if ($value[type] != "image")
							$out .= $value2.", ";
					}
				}
				$out .= "</option>";
			}
			$out .= "</select>";
		}
		//Ermitteln ob das Feld ein Unix-Timestamp beinhaltet
		if ($aProp[$tableId][$fieldName] == "unixtimestamp") {
			$field = date("d.m.Y H:i s", $field);
		}
		//Ermitteln ob n:m identifier editierbar ist (destination)
		$aIdNamesNToM = getIdentifierNToM($sourceTableName);
		$destTable=getOtherTableNToM($sourceTableName);
		$iDisplayNToM = "on";
		
		if (@in_array($fieldName, $aIdNamesNToM)) {
			$iDisplayNToM = "off";
			if ($fieldName != $aIdNamesNToM[0]) { //Ausschluss der source Identifier
				
				$aRelTable=dbQuery("SELECT * FROM ".$destTable);
				$out .= "<select name='$fieldName'><option></option>";
				foreach ($aRelTable as $key => $value) {
					$selected = "";
					if ($field == $value[id]) {
						$selected = " selected ";
					}
					$out .= "<option value='$value[id]' $selected>";
					foreach ($value as $key2 => $value2) {
						if (is_numeric($value2)) {
							if ($key2 == "id") {
								$out .= $value2.", ";
							}
						} else {
							if (strlen($value2) > 70) {
								$value2 = substr($value2,0,70)."...";
							} else {
								$value2 = $value2;
							}
							$out .= $value2.", ";
						}
					}
					$out .= "</option>";
				}
				$out .= "</select>";
			} else {
			$out .= "
<input type='text' value='$field' name='$fieldName' disabled>
<input type='hidden' value='$field' name='$fieldName'>"; 	
			}
		}
		
		if ($iDisplayNToM == "off"){ //Ausschluss der n:m Identifier
			$out ."";
		} elseif (isset($aRel['NTo1'][$table][$fieldName])){ //Ausschluss der n:1 Identifier
			$out ."";
		} elseif (@in_array($fieldName,$aRightsUnchangeable[$tableId])) { //Leserechte
			$out .= "
<div>$field</div>"; 	
		} elseif ($aProp[$tableId][$fieldName] == "tinymce") { //Felder mit TinyMce 
			$out .= "<textarea id='elm1' name='$fieldName' rows='5' cols='80' style='padding:0px 0px 0px 0px'>$field</textarea>";
		} else { //Schreibrechte
			$out .= "
<input type='text' name='$fieldName' value='$field'>"; 
		}
		$out .= "
	</td>
</tr>";
	}*/
	$out .= "
<input type='hidden' name='savePost' value='on'>	
<input type='hidden' name='table1' value='$_GET[sourceTable]'>
<input type='hidden' name='table2' value='$_GET[destTable]'>
<input type='hidden' name='columnNameOfId' value='id'>	
<input type='hidden' name='id' value='$id'>	

<tr>
	<td valign='top'>
	</td>
	<td valign='top' valign='top'><input type='Submit' value='Speichern'><br>
	<input onClick=\"window.close()\" type='button' class='submit' value='Zur&uuml;ck'>
	</td></form>
</tr></table></div>";
	echo $out;
}

function getNextAutoincrementValue($table) {
	global $aDatabase;
	$q = "SHOW TABLE STATUS FROM `$aDatabase[dbname]` LIKE '$table'";
	$a = dbQuery($q);
	if ($a[0][AUTO_INCREMENT])
		return $a[0][AUTO_INCREMENT];
	elseif ($a[0][Auto_increment])
		return $a[0][Auto_increment];
	elseif ($a[0][auto_increment])
		return $a[0][auto_increment];
}
function displayRow(
$id,/*1*/ 
$columnNameOfId, /*2*/
$tableOrId, /*3*/
$hiddenCode="", /*4*/
$viewtype="edit",/*5*/
$aManualFieldProperties=array(),/*6*/ 
$formAction="",/*7*/
$sUserFunction="",/*8*/
$sSavePost="on"/*9*/,
$sSubmitValue="Speichern"/*10*/,
$showRelations="yes"/*11*/) {

	global $webuser, $aRightsUnchangeable, $aRightsHidden, $aRel, $aProp, $aTable, $lastRowIdNToM, $lastTableNameNToM, $aFormIds;
	$aTableProperties = getTableProperties($tableOrId);
	if (is_numeric($tableOrId)) {
		$table = $aTableProperties[name];
		$tableId = $aTableProperties[id];
	} else {
		$table = $tableOrId;
		$tableId = "";
	}
	
	if (!$viewtype)
		$viewtype = "edit";
	
	$aFormIds[$_SERVER[PHP_SELF]][$table][]=1;
	$fi = md5($_SERVER[PHP_SELF].$table.count($aFormIds[$_SERVER[PHP_SELF]][$table]));

	if ($sSavePost == "" or $sSavePost == null)
		$sSavePost = "on";

	$lastRowIdNToM = $id;
	$_SESSION[lastRowIdNToM] = $lastRowIdNToM;
	$lastTableNameNToM = $table;
	
	if (!$id) {
		$q="SHOW COLUMNS FROM $table";
		$a = dbQuery($q);
		foreach ($a as $k => $v) 
			$arrRowContent[0][$v[Field]] = $v['Default'];
	} else 
		$arrRowContent=selectRec($table,"$columnNameOfId='$id'");
	
	//Tabellenname f&uuml;r Output bereitstellen
	foreach ($aTable as $key => $value) {
		if ($value[name] == $table) {
			$langTable = $value[lang];
		}
	}
	//print_r($arrRowContent);
//$fi = rand(1,10000).$table;
	$out = "<div class=\"display_row\"><div class=\"table_overall\">";
	if ($webuser) {
		$t = '';
		$os = " onSubmit=\"validate('".$table."','$fi','".RELATIVEPATHAPP."'); return false;\" ";
	} else 
		$t = "index.php";
	if ($formAction)
		$t = $formAction;
	
	if ($aManualFieldProperties) {
		//$_SESSION[manualFieldProperties] = array();
		$_SESSION[manualFieldProperties][$fi] = $aManualFieldProperties;
		//echo "<pre>";
		//print_r($_SESSION);
		//echo "</pre>";
	}
	$_SESSION[tempRights][$fi] = array();
	$out .= "
<form action=\"$t\" target=\"_self\" method=\"post\" enctype=\"multipart/form-data\" id='$fi'
$os
>
<table>";
	if (!$webuser)
			$out .= "<tr>
		<td valign='top' align='right'><b>Tabelle</b>
		</td>
		<td valign='top'><h2>$langTable</h2>
		</td>
	</tr>";
	
	
	foreach ($arrRowContent[0] as $fieldName => $field) {
		if ((!$aRightsHidden[$tableId][$fieldName] and !$aManualFieldProperties[$table."-".$tableId][$fieldName][hidden]) or @$aManualFieldProperties[$table."-".$tableId][$fieldName][visible]) {
			$q = "SELECT f.title FROM conf_fields f, conf_tables t WHERE f.name = '$fieldName' and f.id_table = t.id and t.name = '$table'";
			$aT = dbQuery($q);
			if ($aT[0][title])
				if ($webuser)
					$f = $aT[0][title];
				else
					$f = $aT[0][title]." ($fieldName)";
			else 
				$f = $fieldName;
			$out .= "<tr class='tr_$table_$fieldName'>";
			$out .= "<td valign='top' align='right' class='td_$table_$fieldName label'><div class='b'>".$f."</div></td>
			<td valign='top' align='left' class='td_$table_$fieldName'>";
			$fo = "";
			$fo = generateField(
			$tableId, 
			$fieldName, 
			$field, 
			$viewtype, 
			$aManualFieldProperties, 
			"", 
			$fi, 
			$webuser, 
			$arrRowContent, 
			$sUserFunction);
			$out .= "$fo
			</td>
			</tr>";
		}
	}
	//wenn es eine ntom gibt mit Ajax 
	//print_r($aRel['NToM'][$tableId]);
	//echo "$tableId";
	//print_r($aRel['NToM']);
	if (is_array($aRel['NToM'][$tableId])) {
	
		foreach ($aRel['NToM'][$tableId] as $k => $v) {
			if ($v[ntomDisplayType] == "ajax") {
				//pre($v);
				$aTargetTable = getTableProperties($v[destTable]);
				$out .= "<tr class='tr_$table_$aTargetTable[name]'>";
				$out .= "<td valign='top' align='right' class='td_$table_$aTargetTable[name]'><div class='b'>".$aTargetTable[lang]."</div></td>
				<td valign='top' align='left' class='td_$table_$aTargetTable[name]'>";
				
				$q = "SELECT * FROM $v[assignTable] WHERE $v[sourceFieldname] = '$id'";
				$a = dbQuery($q);
				if (count($a))
				foreach ($a as $k1 => $v1) {
					if ($v1[$v[destFieldname]] != 0) {
						$q = "SELECT * FROM $aTargetTable[name] WHERE id = '".$v1[$v[destFieldname]]."'";
						$aD = dbQuery($q);
						$r .= $aD[0][name].", ";
					}
				}
				if ($webuser) {
					$val = "<div id='val_".$fi."_ntom_$v[relationId]' class=val></div>";
					$_SESSION[tempRights][$fi][allow][] = "ntom_$v[relationId]";
				}
				$out .= "<input type='text' name='ntom_$v[relationId]' id='ntom_$v[relationId]' value='$r' style='width:20em;' autocomplete='off' class='ntom_autocomplete'>$val
				</td>
				</tr>";
			}
		}
	}
	
	if ($hiddenCode) {
		$out .= $hiddenCode;
		/*sicherheit*/
		//die name paare aus dem hiddencode holen
		preg_match_all('/name=[\'|"| ]?(\w+)[\'|"| ]?/is',$hiddenCode,$t);
		foreach ($t[1] as $k => $v) {
				$_SESSION[tempRights][$fi][allow][] = $v;
		}
	}
	if ($webuser) {
		$_SESSION[tempRights][$fi][table] = $table;
		$_SESSION[tempRights][$fi][tableId] = $tableId;
		$_SESSION[tempRights][$fi][columnNameOfId] = $columnNameOfId;
		$_SESSION[tempRights][$fi][id] = $id;
		$_SESSION[tempRights][$fi][ts] = time();
		$of = "<input type='hidden' name='bncms_form' value='$fi'>";
	} else {
		$of = "<input type='hidden' name='table' value='$table'>
		<input type='hidden' name='tableId' value='$tableId'>
<input type='hidden' name='columnNameOfId' value='$columnNameOfId'> 
<input type='hidden' name='id' value='$id'>	";	
	}
	
	if ($sSavePost == "on") {
		$of .= "<input type='hidden' name='savePost' value='on'>";
	}
	if ($viewtype != "view") {
	$out .= "
<tr>
	<td class='label'>
	$of
	</td>
	<td valign='top' align='left'>";
	
	if (!$sSubmitValue)
		$sSubmitValue = "Abschicken";
	
	if ($webuser) 
		$v = "<button id='bu_$fi' class='submit' type='submit' onclick=\"jQuery('.lightbox').html('');\">$sSubmitValue</button><img src='".RELATIVEPATH."/image/loading.gif' style='display:none;opacity:0.3;width:2em' id='lo_$fi'>";
	else 
		$v = "<input type='hidden' name='bncms_closeafter' id='bncms_closeafter' value='0'><nobr><input type='Submit' class='submit' value='$sSubmitValue' onclick=\"jQuery('.lightbox').html('');\"> <input type=\"Button\" class='submit' value=\"Speichern und Zur&uuml;ck\" onclick='jQuery(\".lightbox\").html(\"\");document.getElementById(\"bncms_closeafter\").value = \"1\"; this.form.submit();'></nobr>";
	if ($viewtype == "edit")
		$out .= $v;
	if (!$webuser)
		$out .= "<input onClick=\"window.close()\" type='button' class='submit' value='Zur&uuml;ck'>";
		
	$out .= "<br><br></td>
</tr></form>";
}	
	if (function_exists("adminUserFuncDisplayRow")) {
		$r = call_user_func_array("adminUserFuncDisplayRow", array($tableId, $id, $row));
		if ($r)
			$out .= "<tr><td colspan=50><h2>Spezialfunktionen:</h2>$r</td></tr>";
	}
	if ($id and $showRelations == "yes") {
		//Ermittlen ob n:m vorhanden ist und Tabelle ausgeben
		if (is_array($aRel['NToM'][$tableId])) {
			//print_r($aRel['NToM'][$tableId]);
			//echo $tableId;
			foreach ($aRel['NToM'][$tableId] as $count => $content) {
				///if ($content['destTable'] == $tableId) {
				
					$assignTable=$content[assignTable];
					$destTable=getNameFromTableString($content[destTable]);
					$destTableId=getIdFromTableString($content[destTable]);
					$identifier=$content[sourceFieldname];
					$destIdentifier=$content[destFieldname];
					
						
					$sQueryOver="SELECT $destTable.".getIdName($destTable).", $assignTable.* FROM $table, $assignTable, $destTable
					WHERE $table.".getIdName($table)." = '$id'
					AND $assignTable.$identifier = $table.".getIdName($table)."
					AND $assignTable.$destIdentifier = $destTable.".getIdName($destTable)."";
					
					$sQueryOver2="SELECT $destTable.*, $assignTable.".getIdName($destTable)." as bncms_assign_id  FROM $table, $assignTable, $destTable
					WHERE $table.id = '$id'
					AND $assignTable.$identifier = $table.id
					AND $assignTable.$destIdentifier = $destTable.id";
					//Tabellenname f&uuml;r Output bereitstellen
					foreach ($aTable as $key => $value) {
						if ($value[name] == $destTable) {
							$langTable = $value[lang];
						}
					}
					$out .= "
				<tr>
					<td valign='top' colspan='".count($arrTableColumnNames)."'>";
					$out .= "<div class=\"table_overall\">";
					$out .= displayVisibilityButtons("Zuordnungen zu ".$langTable, $destTable."Edit","",1);
					$out .= "<div id='".$destTable."Edit' style='display:none;'>";	
					$out .= displayTable(
					$destTableId, 
					getIdName($destTable), 
					"", 
					$sQueryOver, 
					$sQueryOver2, 
					"no", 
					c($table)."-".$tableId."_".$id, 
					"yes",
					null,
					"ntom"
					);
					$out .= "
					</div></div>";	
					$out .= "
					</td>
					</tr>
					";
				//}
			}
		}
		
		//Ermitten ob eingehende nzu1-Einträge hat
		
		foreach ($aRel[NTo1] as $k => $v) {
			foreach ($v as $k2 => $v2) {
				if ($v2 == $tableId) {
					$aLinkingTable = getTableProperties($k);
					if ($aLinkingTable[lang])
						$t = $aLinkingTable[lang];
					else
						$t = $aLinkingTable[name];
					$out .= "
				<tr>
					<td valign='top' colspan='2'>";
					$out .= "<div class=\"table_overall\">";
					$out .= displayVisibilityButtons("Ausgehende Zuordnungen von ".$t, $aLinkingTable[id],"",1);
					$out .= "<div id='".$aLinkingTable[id]."' style='display:none;'>";	
					$out .= displayTable(
					$aLinkingTable[id], 
					getIdName($aLinkingTable[id]), 
					" $k2 = '$id' ", 
					"",
					"",
					"", 
					c($table)."-".$tableId."_".$id, 
					"no",
					null,
					"nto1output"
					);
					$out .= "
					</div></div>";	
					$out .= "
					</td>
					</tr>";
				}
			}
		}
	}
	$out .= "</table></div></div>
	<script>
		jQuery('#".$fi." input[type=text]').each(function() {
			var o='';
			if (jQuery(this).attr('maxlength')) {
				for (i = 0; i < jQuery(this).attr('maxlength'); i++) {
					if (i < 100)
					o = o + 'a';
				} 
				var w = jQuery(this).textWidth(o);
				if (w > jQuery(document).width()*0.7)
					w = jQuery(document).width()*0.7;
				jQuery(this).css('width',w);
			}
		});
	</script>
	";
	echo $out;
}

function generateField(
$tableOrId, //1
$fieldName, //2 
$field, //3 
$viewtype="edit", //4 
$aManualFieldProperties="", //5 
$outputFieldname="", //6 
$fi="", //7 
$webuser="", //8 
$arrRowContent = "", //9 
$sUserFunction="", //10
$sComingFrom="" //11
 ) {

	global $dateIncludeJsDone, $tinymceIncludeJsDone, $aRel, $aProp, $aRightsHidden, $aRightsUnchangeable;
	//echo "$tableOrId, //1 $fieldName, //2 $field, //3 ";
	$aTableProperties = getTableProperties($tableOrId);
	$aFieldProperties = getFieldProperties($tableOrId, $fieldName);
	if (is_numeric($tableOrId)) {
		$table = $aTableProperties[name];
		$tableId = $aTableProperties[id];
	} else {
		$table = $tableOrId;
		$tableId = "";
	}
	//typ überschreiben mit aManualFieldProperies
	if (@$aManualFieldProperties[$table."-".$tableId][$fieldName]['type']) {
		$aProp[$tableId][$fieldName] = $aManualFieldProperties[$table."-".$tableId][$fieldName]['type'];
		$aFieldProperties['type'] = $aManualFieldProperties[$table."-".$tableId][$fieldName]['type'];
	}
	
	if ($viewtype == "edit") {
		if (!$outputFieldname) {
			$outputFieldname = $fieldName;
		}
		$maxlength = getLengthFromField($fieldName, $table);
		
		if ($aRel['NTo1'][$tableId][$fieldName] != "") {
			if ($aFieldProperties[nto1DisplayType] == "radio" or !$aFieldProperties[nto1DisplayType]) {
			//nzu1 Zuweisung
			$fo .= "<input type=\"text\" id=\"".$fi."_".$fieldName."\" maxlength=\"".$maxlength."\"  name=\"$outputFieldname\" value=\"$field\" > <a href=\"javascript:void(0)\"onClick='show_lightbox(\"l_".$fi."_".$fieldName."\")'>Eintrag&nbsp;w&auml;hlen</a>";
			$fo .= displayLightbox("l_".$fi."_".$fieldName,
			displayTable(
			$aRel['NTo1'][$tableId][$fieldName],
			getIdName($aRel['NTo1'][$tableId][$fieldName]),
			"",
			"",
			"",
			"no",
			"",
			"",
			"",
			"noecho",
			"",
			"",
			"",
			"",
			"radio",
			"yes",
			0, 
			"document.getElementById('".$fi."_".$fieldName."').value = this.value; document.getElementById('l_".$fi."_".$fieldName."').style.display = 'none';"
			)
			);
			} elseif ($aFieldProperties[nto1DisplayType] == "dropdown") {
				$fo .= "<select name=\"$outputFieldname\">";
				$tt = getTableProperties($aRel['NTo1'][$tableId][$fieldName]);
				$q = "SELECT * FROM $tt[name] ORDER BY $aFieldProperties[nto1DropdownTitleField]";
				$a = dbQuery($q);
				$fo .= "<option></option>";
				foreach ($a as $k => $v) {
					if ($v[getIdName($aRel['NTo1'][$tableId][$fieldName])] == $field)
						$s = "selected";
					else
						$s = "";
					$fo .= "<option value='".$v[getIdName($aRel['NTo1'][$tableId][$fieldName])]."' $s>".$v[$aFieldProperties[nto1DropdownTitleField]]."</option>";
				}
				
				$fo .= "</select>";
			}
		} 
		if (($aRightsUnchangeable[$tableId][$fieldName]) or 
		(@$aManualFieldProperties[$table."-".$tableId][$fieldName][unchangeable]) or 
		$fieldName == getIdName($tableId) or 
		$viewtype == "view" ) { 				
			//Leserechte
			$fo .= "<div>$field</div>"; 
				
		} elseif ((@$aRightsHidden[$tableId][$fieldName] or @$aManualFieldProperties[$table."-".$tableId][$fieldName][hidden]) and !@$aManualFieldProperties[$table."-".$tableId][$fieldName][visible]) { 
			//Versteckte Felder
				//nichts
				
		} elseif ($aProp[$tableId][$fieldName] == "date") {
				global $dateIncludeJsDone;
			if ($dateIncludeJsDone != 1) {
				$fo .= '
				
				<link rel="stylesheet" type="text/css" href="/bncms/lib/datetimepicker-master/jquery.datetimepicker.css"/ >
<script src="/bncms/lib/datetimepicker-master/build/jquery.datetimepicker.full.min.js"></script>
 
				';
				$dateIncludeJsDone = 1;
			}
			$date = date("d.m.Y H:i:s", $field);
			
			$fo .= "<input type=\"text\" id=\"".$fi."_".$fieldName."\" name=\"$fieldName\" maxlength=\"".'19'."\" style=\"cursor:pointer; \" value=\"$date\"  > <img src=\"/bncms/image/calendar.gif\" style=\"vertical-align:middle\"/>
			<script>jQuery('#".$fi."_".$fieldName."').datetimepicker({
				format: 'd.m.Y H:i:s'
});</script>
			";
			
		} elseif (isset($aRel['NTo1'][$tableId][$fieldName])){ 
			//Ausschluss der n:1 Identifier
			$fo .= "";
			
		} elseif ($aProp[$tableId][$fieldName] == "checkbox") { 
			//checkbox 
			if ($field == "on")
				$o = "checked";
			else
				$o = "";
			$fo .= "<input type='hidden' name='$outputFieldname' value='off'><input type='checkbox' name=\"$outputFieldname\" style=\"\"  class='checkbox' id='$fi_$outputFieldname' $o><label for=\"$fi_$outputFieldname\"></label>";
			
		} elseif ($aProp[$tableId][$fieldName] == "tinymce") { 
			//TinyMce 
			if ($tinymceIncludeJsDone != 1) {
			$fo .= '<script type="text/javascript" src="/bncms/lib/tinymce/tinymce.min.js"></script>
	<script type="text/javascript">
		tinymce.init({
			selector: "#'.$fieldName.'",
			plugins: "code"
		});
	</script>';
			$tinymceIncludeJsDone = 1;
			}
	
			$fo .= "<textarea id='$fieldName' name='$outputFieldname' rows='5' cols='80' style='padding:0px 0px 0px 0px'>$field</textarea>";
			
		} elseif ($aProp[$tableId][$fieldName] == "ip") { 
			//Bild 
			$fo .= "<input type=text name=\"$outputFieldname\" value='$field'> <a href='http://www.utrace.de/?query=$field' target='_blank'>utrace.de</a>";
		} elseif ($aProp[$tableId][$fieldName] == "image") { 
			//Bild 
			$fo .= "<input type=\"file\" name=\"$outputFieldname\">";
			if (file_exists(PATH."/".$field) and $field != "") {
				$fo .= "<br /><a href=\"".RELATIVEPATH."/$field\" target=\"_blank\" onClick=\"javascript: ajax_send_scrollpos('".$_SERVER[PHP_SELF]."');\"><img src=\"".RELATIVEPATH."/".str_replace("file/","file/th_",$field)."\" class=bnul></a>";
				$fo .= "<div style=\"clear:both;\" align=\"left\"><input type=\"checkbox\" style=\"\" name=\"deleteFile[$fieldName]\" id='".$fi."_deleteFile[".$fieldName."]' class='checkbox'><label for=\"".$fi."_deleteFile[".$fieldName."]\"> Bild l&ouml;schen?</label></div>";
			}
		} elseif ($aProp[$tableId][$fieldName] == "file") { 
			//Datei 
			$fo .= "<input type=\"file\" name=\"$outputFieldname\">";
			if (file_exists(PATH."/".$field) and $field != "") {
				$fo .= "<br /><a href=\"".RELATIVEPATH."/$field\" target=\"_blank\" onClick=\"javascript: ajax_send_scrollpos('".$_SERVER[PHP_SELF]."');\">".str_replace("file/","",$field)."</a>";
				$fo .= "<br><input type=\"checkbox\"  class='checkbox' style=\"width:20px;\" name=\"deleteFile[$fieldName]\" value=\"1\">Datei l&ouml;schen?";
			}
			
		} elseif ($aProp[$tableId][$fieldName] == "price") { 
			//Preis 
				$sf = number_format($field,2);
			$fo .= "<input type='text' id=\"$fieldName\" name=\"$outputFieldname\" value='".$sf."' onkeyup='allowChars(this,/[^0-9\.]/gi)' onchange='allowChars(this,/[^0-9\.]/gi)'>";
		} elseif ($aProp[$tableId][$fieldName] == "url" or $aProp[$tableId][$fieldName] == "textarea" or $aProp[$tableId][$fieldName] == "text") {  
			$fo .= "<textarea name=\"$outputFieldname\">$field</textarea>";
			
		} elseif ($aProp[$tableId][$fieldName] == "password") { 
			//Passwort
			if ($aManualFieldProperties[$table."-".$tableId][$fieldName][entry])
				$fo .= "
			<input type='password' id=\"".$fi.$fieldName."\" name=\"".$outputFieldname."\" value='' > ";
			else	
			$fo .= "
			<input type='password' id=\"".$fi.$fieldName."\" name=\"".$outputFieldname."\" disabled='disabled' value=''   style='background-color:lightgrey'> 
			<a id='lid".$fi.$fieldName."' href='javascript:Void(0)' onClick='
			document.getElementById(\"".$fi.$fieldName."\").setAttribute(\"disabled\",\"disabled\");
			this.style.display=\"none\"; 
			document.getElementById(\"lia".$fi.$fieldName."\").style.display=\"inline\";
			document.getElementById(\"".$fi.$fieldName."\").style.backgroundColor=\"lightgrey\";' style=\"display:none\">Doch nicht speichern?</a>
			<a id='lia".$fi.$fieldName."' href='javascript:Void(0)' onClick='
			document.getElementById(\"".$fi.$fieldName."\").removeAttribute(\"disabled\"	);  
			document.getElementById(\"lid".$fi.$fieldName."\").style.display=\"inline\"; 
			document.getElementById(\"".$fi.$fieldName."\").style.backgroundColor=\"white\"; 
			this.style.display=\"none\";
			'>Neu&nbsp;speichern?</a>";
			
		} elseif ($aProp[$tableId][$fieldName] == "dropdown") { 
			//set
			
			$q = "SHOW FIELDS
	FROM $table where Field ='$fieldName'";
			$a = dbQuery($q);
			$t= str_replace('"',"",str_replace("'","",str_replace(")","",str_replace("set(","",$a[0][Type]))));
			$a = explode(",",$t);
			
			$fo .= "<select id=\"$fieldName\" name=\"$outputFieldname\">";
			foreach($a as $k => $v) {
				if ($field == $v)
					$s = "selected";
				else
					$s = "";
				
				$fo  .= "<option $s>$v</option>";
			}
			$fo .= "</select>";
			
		} elseif ($aProp[$tableId][$fieldName] == "number") {
		//Schreibrechte
			$fo  .= "
	<input type='number' name='$outputFieldname' value='$field' maxlength=\"".$maxlength."\"  onkeyup='allowChars(this,/[^0-9\.]/gi)' onchange='allowChars(this,/[^0-9\.]/gi)'	>"; 
		}  else { 
			//Schreibrechte
			$aTableProp=getTableProperties($tableId); 
			if ($aProp[$tableId][$fieldName] != "date" and 
			$aTableProp[columnNameOfId] != $fieldName or 
			$aProp[$tableId][$fieldName] == "textfield") {
				if ($aFieldProperties[mysql_type_bez] == "INT")
					$ty = "number";
				else
					$ty = "text";
				$fo  .= "
	<input type='$ty' name='$outputFieldname' value='$field' maxlength=\"".$maxlength."\" >"; 
			} 
			if ( $aTableProp[columnNameOfId] == $fieldName)
				$fo .= $field;
		}
		
		
		
		if ((!$aRightsHidden[$tableId][$fieldName] and 
		@!$aManualFieldProperties[$table."-".$tableId][$fieldName][hidden]) or 
		@$aManualFieldProperties[$table."-".$tableId][$fieldName][visible]) {
			if ($webuser) {
				$val = "<div id='val_".$fi."_$fieldName' class=val></div>";
				$_SESSION[tempRights][$fi][allow][] = $fieldName;
			}
			if ($sUserFunction) {
				$fo = call_user_func_array($sUserFunction, array($fo, $fieldName, $arrRowContent));
			}
			if (function_exists("adminUserFuncGenerateField")) {
				$fo = call_user_func_array("adminUserFuncGenerateField", array($tableId, $fo, $fieldName, $arrRowContent, $sComingFrom, "write"));
			}
		} 
		return $fo.$val;
	}
	
	if ($viewtype == "view") {

		//Datum
		if ($aProp[$tableId][$fieldName] == "date") 
			if ($field != "0")
				$field = date("d.m.Y H:i s", $field);
		
		//Länge beschneiden
		$fieldOld = $field;
		$field = @strip_tags($field);
		if (strlen($field) > 70) {
			$field = substr($field,0,70)."...";
		} else {
			$field = $field;
		}
		
		//Datei
		if ($aProp[$tableId][$fieldName] == "url") 
			if ($field != "")
				$field = "<a href=\"$fieldOld\" target='_blank'>$field</a>";
		
		//Datei
		if ($aProp[$tableId][$fieldName] == "file") 
			if ($field != "")
				$field = "<a href=\"".RELATIVEPATH."/".$field."\" >".str_replace("file/","",$field)."</a>";
			
		//IP	
		if ($aProp[$tableId][$fieldName] == "ip") 
			if ($field != "")
				$field = "<a href='http://www.utrace.de/?query=$field' target='_blank'>".$field."</a>";
		
		//Bild	
		if ($aProp[$tableId][$fieldName] == "image") 
			if ($field != "")
				$field = $field."<br><img src=\"".RELATIVEPATH."/".str_replace("file/","file/th_",$field)."\" class=bnul>";
				
		//Preis
		if ($aProp[$tableId][$fieldName] == "price") 
			if ($field != "")
				$field = number_format($field,2);
		
		//Ermitteln ob Feld eine n zu 1 enth&auml;lt
		if ($aRel[NTo1][$tableId][$fieldName] != "") {
		}
		
		if ($sUserFunction) {
			$field = call_user_func_array($sUserFunction, array($field, $fieldName, $arrRowContent));
		}
		if (function_exists("adminUserFuncGenerateField")) {
			$field = call_user_func_array("adminUserFuncGenerateField", array($tableId, $field, $fieldName, $arrRowContent, $sComingFrom, "read"));
		}
		//hardcode
		 
		if (($fieldName == "status_2" and $tableId == 14)) {
			$s = $sComingFrom."_".c($table)."-".$tableId."_".$row[id];
			$c = explode("_",$s);
			if (($c[0] == "orders-2" or $c[0] == "orders-13") and $c[2] == "products-1") {
				$q = "SELECT magento_id FROM products WHERE id = '$c[3]'";
				$a = dbQuery($q);
				$q = "SELECT * FROM product_complexity WHERE magento_id = '".$a[0][magento_id]."'";
				$a = dbQuery($q);
				if ($a[0][complex] == "on" and $field == "abgeschlossen") {
					$field = "verheiratet";
				} 
			}
		} 
		return $field;
	}
}

function generateRelatedContent($sComingFromRelations, $table, $tableId, $row, $sDisplayTableRecursivePathOut, $aNTo1TablePath, $arrTableColumnNames, $columnNameOfId, $iSwitchInColumnSeparat) {
	global $aRel;
	//Anzeige der Relationen mit separaten Icons
	$q = "SELECT * FROM conf_relation_visibility WHERE path REGEXP '^$sComingFromRelations-[0-9]+$'  AND (showWithEditIcons = 'Separat' OR showWithEditIcons = 'Beides')";
	$a = q($q,"",1);
	//pre($a);
	if (count($a)) {
		foreach ($a as $k => $v) {
			$op .= "<div id=\"div_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_".$sDisplayTableRecursivePathOut."_".$v[path]."\" style=\"display:none\"><table class=\"table_spacer\">";
			$r = preg_match('/-([0-9]+)$/', $v[path], $t);
			
			$q = "SELECT * FROM conf_relations WHERE id = '$t[1]'";
			$aRelation = q($q);
			//pre($aRelation);
			$iSwitchInSeparat = 0;
			if ($aRelation[type] == "nto1") {
				if ($aRelation[nto1TargetTable] == $tableId){
					//ist eingehend
					if ($t = displayNTo1InputRelation($aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, $aRelation[nto1SourceField], $aRelation[nto1SourceTable], $columnNameOfId, 'Separat')) {
						$op .= $t;
						$iSwitchInSeparat = 1;
					}
				} else {
					//ist ausgehend
					if ($t = displayNTo1OutputRelation($row[$aRelation[nto1SourceField]], $aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, $aRelation[nto1SourceField], $arrTableColumnNames, $columnNameOfId,  'Separat')) {
						$op .= $t;
						$iSwitchInSeparat = 1;
					}
				}
			} else {
				//pre($aRel[NToM][$tableId]);
				//pre( $aRelation);
				foreach ($aRel[NToM][$tableId] as $k2 => $v2) {
					if ($v2[relationId] == $aRelation[id]) {
						$content = $v2;
					}
				}
				if ($t = displayNToMRelation($content, $aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, 'Separat')) {
					$op .= $t;
					$iSwitchInSeparat = 1;
				}
			}
			//$op .= pre($aRelation,1);
			if ($iSwitchInSeparat) {
				//<tr><td>'icon_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_".$sDisplayTableRecursivePathOut."_".$v[path]."'</td></tr>
				
				$op .=  "<script>jQuery('#icon_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_".$sDisplayTableRecursivePathOut."_".$v[path]."').css('display','inline');</script>";
			}
			$op .="</table>";
			$op .= "</div>";
		}
	}
	
	//n:m Relation
	//Ermitteln ob n:m Relation vorhanden ist
	if (is_array($aRel['NToM'][$tableId])) {
		foreach ($aRel['NToM'][$tableId] as $count => $content) {
			if ($t = displayNToMRelation($content, $aNTo1TablePath,$sComingFromRelations,$table,$tableId, $row,'Normal')){
				$opo .= $t;
				$iSwitchInDot = 1;
			}
		}
	}
	//Ermitteln ob n:1 Relation vorhanden ist (Output

	//n:1 Relation
	foreach ($row as $field => $content) {
		//Ermitteln ob n:1 Relation vorhanden ist
		if (isset($aRel[NTo1][$tableId][$field])) {
			if ($t = displayNTo1OutputRelation($content, $aNTo1TablePath, $sComingFromRelations, $table,$tableId, $row, $field, $arrTableColumnNames, $columnNameOfId, 'Normal')) {
				$opo .= $t;
				$iSwitchInDot = 1;
			}
		}
	}//Foreach row eof
	//Ermitteln ob n:1 Relation vorhanden ist (Input)
	//n:1 Relation
	foreach ($aRel[NTo1] as $linkingTable => $value) {
		//pre($value);
		foreach ($value as $linkingField => $targetTable) {
			if ($targetTable == $tableId) {
				
				if ($t = displayNTo1InputRelation($aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, $linkingField, $linkingTable, $columnNameOfId, 'Normal')) {
					$opo .= $t;
					//echo "$aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, $linkingField, $linkingTable, $columnNameOfId, 'Normal'";
					$iSwitchInDot = 1;
				}
			}	
		} 
	}
	if ($iSwitchInDot == 1) {
		$op .=  "<div id=\"div_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_".$sDisplayTableRecursivePathOut."\" style=\"display:none\"><table class=\"table_spacer\">";
		$op .=  "<script>jQuery('#icon_".$table."-".$tableId."_".$row[$columnNameOfId]."_relations_".$sDisplayTableRecursivePathOut."').css('display','inline');</script>";
		$op .= "$opo</table></div>";
	}
	return $op;
}
function  displayNTo1InputRelation($aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, $linkingField, $linkingTable, $columnNameOfId, $showWithEditIcons) {
	global $aTable, $webuser;
	//echo "$aNTo1TablePath, $sComingFromRelations, $table, $tableId, $row, $linkingField, $linkingTable, $columnNameOfId, $showWithEditIcons";
	$cr = getNTo1RelationId($tableId,$linkingField,$linkingTable);
	//echo "$sComingFromRelations-$cr,$showWithEditIcons".checkRelationVisibility($sComingFromRelations."-".$cr,$showWithEditIcons);
	if (checkRelationVisibility($sComingFromRelations."-".$cr,$showWithEditIcons)) {
		$q = "SELECT * FROM conf_relation_visibility WHERE path = '".$sComingFromRelations."-".$cr."'";
		$aVisibility = q($q);
		//pre($row);
		$q = "SELECT * FROM conf_relations WHERE id = '$cr'";
		$aRelation = q($q);
		//pre($row);
		//pre($aRelation);
		$query = "SELECT ".getIdName(getNameFromTableString($linkingTable))." FROM ".getNameFromTableString($linkingTable)." WHERE $linkingField = '".$row[$aRelation[nto1TargetField]]."'";
		$RS5=dbQuery($query);
		//echo pre($RS5,1);
		if (count($RS5) > 0) {
			$q = "SELECT name FROM conf_tables WHERE id = '$linkingTable'";
			$a = dbQuery($q);
			//if (!in_array(c($a[0][name])."-".$linkingTable, $aNTo1TablePath)) {
				foreach ($aTable as $key3 => $value3) {
					if ($value3[id] == $linkingTable) {
						$langTable = $value3[lang];
					}
				}
				if ($aVisibility[title])
					$sT = $aVisibility[title];
				else
					$sT = "<= ".$langTable." <span style='font-size:13px; font-weight:normal'>(".formTableName($linkingTable).": <b>".formFieldName($linkingTable, $linkingField)."</b>)</span>";
				$op .=  "
				<tr>
					<td valign=\"top\" colspan=\"".(50)."\"  class=\"table_relations\"><div class=\"table_overall leftborder\">";
				
				$op .=  "<h5>$sT</h5>";
				$op .=
				displayTable(
					$linkingTable, 
					getIdName($linkingTable),
					$linkingField." = '".$row[$aRelation[nto1TargetField]]."' ",
					"",
					"",
					"",
					c($table)."-".$tableId."_".$row[$columnNameOfId],
					"",
					"yes",
					"nto1input",//10
					5,
					0,
					0,
					packGlobals(),
					"",
					"",
					"",
					"",
					"",
					"",//20
					"",
					"",
					"",
					"",
					"",
					$sComingFromRelations."-".$cr
				);
				
				$op .=  "
					</div></td>
				</tr>";
		//	}
		}
	}
	return $op;
}

function displayNTo1OutputRelation($content, $aNTo1TablePath, $sComingFromRelations, $table,$tableId, $row, $field, $arrTableColumnNames, $columnNameOfId,  $showWithEditIcons) {
	global $aTable, $aRel, $webuser;
	$cr = getNTo1RelationId(getIdFromTableString($aRel['NTo1'][$tableId][$field]),$field,$tableId);
	if (checkRelationVisibility($sComingFromRelations."-".$cr,$showWithEditIcons)) {
		$q = "SELECT * FROM conf_relation_visibility WHERE path = '".$sComingFromRelations."-".$cr."'";
		$aVisibility = q($q);
		foreach ($aTable as $key => $value) {
			if ($value[id] == $aRel['NTo1'][$tableId][$field]) {
				$langTable = $value[lang];
			}
		}
		$aFieldProp = getFieldProperties($tableId, $field);
		$aTargetField = getFieldProperties($aFieldProp[nto1TargetTable], $aFieldProp[nto1TargetField]);						
		$query = " SELECT * FROM ".getNameFromTableString($aRel['NTo1'][$tableId][$field])." WHERE ".$aTargetField[name]." = '$content' ";
		$RS=dbQuery($query);
		if (count($RS) > 0) {
			$q = "SELECT name FROM conf_tables WHERE id = '".$aRel['NTo1'][$tableId][$field]."'";
			$a =dbQuery($q);
			if (!in_array(c($a[0][name])."-".$aRel['NTo1'][$tableId][$field], $aNTo1TablePath)) {
				
				if ($aVisibility[title])
					$sT = $aVisibility[title];
				else
					$sT = "=> ".$langTable." <span style='font-size:13px; font-weight:normal'>(".formTableName($tableId).": <b>".formFieldName($tableId, $field)."</b>)</span>";
				$op .=  "
				<tr>
					<td valign=\"top\" colspan=\"".(count($arrTableColumnNames)+2)."\"  class=\"table_relations\"><div class=\"table_overall leftborder\">";
				$op .=  "<h5>$sT</h5>";
				
				$op .=  displayTable(
					getIdFromTableString($aRel['NTo1'][$tableId][$field]),
					getIdName(getNameFromTableString($aRel['NTo1'][$tableId][$field])), 
					" $aTargetField[name] = '$content' ",
					"",
					"",
					"",  
					c($table)."-".$tableId."_".$row[$columnNameOfId],
					"",
					"yes",
					"nto1output",//10
					5,
					0,
					0,
					packGlobals(),
					"",
					"",
					"",
					"",
					"",
					"",//20
					"",
					"",
					"",
					"",
					"",
					$sComingFromRelations."-".$cr
				);
				$op .=  "
					</div></td>
				</tr>";	
			}
		}
	}
	return $op;
}
function displayNToMRelation($content, $aNTo1TablePath, $sComingFromRelations, $table,$tableId, $row, $showWithEditIcons) {
	global $aTable, $webuser;
	//echo "$content, $aNTo1TablePath, $sComingFromRelations, $table,$tableId, $row, $showWithEditIcons";
	$assignTable=$content[assignTable];
	$destTable=getNameFromTableString($content[destTable]);
	$destTableId=getIdFromTableString($content[destTable]);
	$identifier=$content[sourceFieldname];
	$destIdentifier=$content[destFieldname];
	if (!in_array(c($destTable)."-".$destTableId, $aNTo1TablePath)) {
		if (checkRelationVisibility($sComingFromRelations."-".$content[relationId]."-a",$showWithEditIcons)) {
			$q = "SELECT * FROM conf_relation_visibility WHERE path = '".$sComingFromRelations."-".$content[relationId]."-a'";
			$aVisibility = q($q);
			$sQueryOver="SELECT $destTable.".getIdName($destTable).", $assignTable.* FROM $table, $assignTable, $destTable
			WHERE $table.".getIdName($table)." = '".$row[getIdName($table)]."'
			AND $assignTable.$identifier = $table.".getIdName($table)."
			AND $assignTable.$destIdentifier = $destTable.".getIdName($destTable)."";
			$sQueryOver2="SELECT $destTable.*, $assignTable.".getIdName($destTable)." as bncms_assign_id  FROM $table, $assignTable, $destTable
			WHERE $table.".getIdName($table)." = '".$row[getIdName($table)]."'
			AND $assignTable.$identifier = $table.".getIdName($table)."
			AND $assignTable.$destIdentifier = $destTable.".getIdName($destTable)."";
			//Tabellenname f&uuml;r Output bereitstellen
			foreach ($aTable as $key => $value) {
				if ($value[name]."-".$value[id] == $destTable."-".$destTableId) {
					$langTable = $value[lang];
				}
			}
			$RS=dbQuery($sQueryOver);
			if (count($RS) > 0) {
				if ($aVisibility[title])
					$sT = $aVisibility[title];
				else
					$sT = "<=o=> ".$langTable." <span style='font-size:13px;'>($assignTable)</span>";
				$op .=  "
				<tr>
					<td valign=\"top\" colspan=\"".(count($arrTableColumnNames)+2)."\"  class=\"table_relations\"><div class=\"table_overall leftborder\">";
				$op .=  "<h5>$sT</h5>";
				
				$op .=  displayTable(
					$destTableId, 
					getIdName($destTableId), 
					"", 
					$sQueryOver, 
					$sQueryOver2, 
					"", 
					c($table)."-".$tableId."_".$row[getIdName($tableId)],
					"yes",
					"",
					"ntom",//10
					30, 
					0,
					0,
					packGlobals(),
					"",
					"",
					"",
					"",
					"",
					"",//20
					"",
					"",
					"",
					"",
					"",
					$sComingFromRelations."-".$content[relationId]."-a"
				);
					
				$op .=  "</div>
				</td>
				</tr>";
			
			}
		}
	}
	return $op;
}
function buildLimit($place, $table, $tableId, $limit) {
	if (is_array($_SESSION[aActivePagesRelations])) {
		foreach ($_SESSION[aActivePagesRelations] as $sPlace => $aActiveTable) {
			if ($sPlace == $place) {
				foreach ($aActiveTable as $sActiveTable => $sActivePage) {
					//$op .= $sActiveTable." == ".$table."-".$tableId;
					if ($sActiveTable == $table."-".$tableId)
						$limitSql .= " ".$limit * ($sActivePage - 1) . "," . $limit;
				}
			}
		}
	}
	if ($limitSql == "") 
		$limitSql =  "0," . $limit;
	if ($limitSql == "-$limit," . $limit) 
		$limitSql =  "0," . $limit;
	$limitSql = preg_replace('/(\-[0-9]+),/',"0",$limitSql);
	return $limitSql;
}

?>